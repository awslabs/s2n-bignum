needs "x86/proofs/base.ml";;

loadt "x86/proofs/simulator.ml";;

let ibyteterm = `[(word 72):byte; word 137; word 209; word 72; word 141; word 84; word 36; word 3;
  word 72; word 139; word 2; word 72; word 137; word 202]`;;
let execth = X86_MK_EXEC_RULE(REFL ibyteterm);;

let goal =
`nonoverlapping
(word pc,
 LENGTH
 [word 72; word 137; word 209; word 72; word 141; word 84; word 36; word 3;
  word 72; word 139; word 2; word 72; word 137; word 202])
(stackpointer,256)
==> ensures x86
    (\s.
         bytes_loaded s (word pc)
         [word 72; word 137; word 209; word 72; word 141; word 84; word 36;
          word 3; word 72; word 139; word 2; word 72; word 137; word 202] /\
         read RIP s = word pc /\
         read RSP s = stackpointer /\
         regfile s =
         [15343200934591885301; 7764048865467659853; 1652247103679492018;
          18204373106090143662; 5; 14535006855913467631;
          16277097019790549486; 13726319562344882679; 7636431339119441917;
          15487597086809994729; 7926264527675844072; 7196180268820945911;
          13744522571740854075; 8039557528494503928; 6891504679383125998;
          15614683560420042493; 11233876724824051453; 11960433059426785135;
          8645685938128337405; 18337245900343006716; 17741436801827796863;
          6240860804196330875; 18302472065638036783; 16967374281073614841;
          17103391552924069431; 10157493475494327950; 17869751153198102366;
          13798529616622577647; 18295775249183668204; 11292577356150734119;
          17266026613262244127; 18395849780525159861; 18150613687380864833;
          18158441559253538667; 11207946232797783975; 5709560455737872265;
          12904189349041142286; 15793541065421298025; 13803319368905911689;
          18248285518437482397; 15561897957739951646; 17720379151987211390;
          17864646017532280667; 6299830420772299900; 15847559973542813036;
          11380063269815823985; 16715381383343199690; 18410711530660737911;
          17167673146159652449; 17516989301454238494; 17634256649003761662;
          15337463724243809878; 6304924578272487962; 11529000904270273686;
          16464975446605803469; 16410727748969887741; 16297220693240380907;
          12373999309802024286; 8352038070888857343; 13811398674417423370;
          8934481951658011642; 17219328673690008714; 7776377125948152797;
          7464433698346889213; 17005002835389050344; 12392700334773981049;
          8065377175105095645; 12582792847395090431; 16110500126046742041;
          6406724699509485043; 18365362404027202007; 5178848937479187135;
          8495924627672005957; 14956093928572944822; 7733361251833141651;
          12605564215848056547; 13834773659114912444; 8289709290054679801;
          7977965841284396719; 12227404559993566190; 17219329486872057039;
          9097110714159757755; 15393016482068657998; 15524252047507939065;
          17365775528542334717; 12934170453423857656; 15996078778597355251;
          16712377706129258623; 14555474565367779662; 17355164320868032490;
          10477157755215863737; 18122194576477249499; 7862858166764030711;
          18275870756173962175; 15923036065223278575; 10931801372581821873;
          17002118176090485719; 18122316974797315479; 6331920030705106431;
          13974387892764002201; 5943181334320473991; 13212954236564747125;
          18356350607154685275; 8352818277763751706; 5985255317087095739;
          3350326170568648702; 8608473379810303831; 2122144980955812810;
          18348642075244342775; 18415145717844962902; 15971925897492221857;
          16569762986905787998])
    (\s.
         read RSP s = stackpointer /\
         regfile s =
         [16463396547855970231; 1652247103679492018; 1652247103679492018;
          18204373106090143662; 5; 14535006855913467631;
          16277097019790549486; 13726319562344882679; 7636431339119441917;
          15487597086809994729; 7926264527675844072; 7196180268820945911;
          13744522571740854075; 8039557528494503928; 6891504679383125998;
          15614683560420042493; 11233876724824051453; 11960433059426785135;
          8645685938128337405; 18337245900343006716; 17741436801827796863;
          6240860804196330875; 18302472065638036783; 16967374281073614841;
          17103391552924069431; 10157493475494327950; 17869751153198102366;
          13798529616622577647; 18295775249183668204; 11292577356150734119;
          17266026613262244127; 18395849780525159861; 18150613687380864833;
          18158441559253538667; 11207946232797783975; 5709560455737872265;
          12904189349041142286; 15793541065421298025; 13803319368905911689;
          18248285518437482397; 15561897957739951646; 17720379151987211390;
          17864646017532280667; 6299830420772299900; 15847559973542813036;
          11380063269815823985; 16715381383343199690; 18410711530660737911;
          17167673146159652449; 17516989301454238494; 17634256649003761662;
          15337463724243809878; 6304924578272487962; 11529000904270273686;
          16464975446605803469; 16410727748969887741; 16297220693240380907;
          12373999309802024286; 8352038070888857343; 13811398674417423370;
          8934481951658011642; 17219328673690008714; 7776377125948152797;
          7464433698346889213; 17005002835389050344; 12392700334773981049;
          8065377175105095645; 12582792847395090431; 16110500126046742041;
          6406724699509485043; 18365362404027202007; 5178848937479187135;
          8495924627672005957; 14956093928572944822; 7733361251833141651;
          12605564215848056547; 13834773659114912444; 8289709290054679801;
          7977965841284396719; 12227404559993566190; 17219329486872057039;
          9097110714159757755; 15393016482068657998; 15524252047507939065;
          17365775528542334717; 12934170453423857656; 15996078778597355251;
          16712377706129258623; 14555474565367779662; 17355164320868032490;
          10477157755215863737; 18122194576477249499; 7862858166764030711;
          18275870756173962175; 15923036065223278575; 10931801372581821873;
          17002118176090485719; 18122316974797315479; 6331920030705106431;
          13974387892764002201; 5943181334320473991; 13212954236564747125;
          18356350607154685275; 8352818277763751706; 5985255317087095739;
          3350326170568648702; 8608473379810303831; 2122144980955812810;
          18348642075244342775; 18415145717844962902; 15971925897492221857;
          16569762986905787998])
    (MAYCHANGE
     [RIP; RSP; RAX; RCX; RDX; RBX; RBP; RSI; RDI; R8; R9; R10; R11; R12;
      R13; R14; R15] ,,
     MAYCHANGE
     [ZMM0; ZMM1; ZMM2; ZMM3; ZMM4; ZMM5; ZMM6; ZMM7; ZMM8; ZMM9; ZMM10;
      ZMM11; ZMM12; ZMM13; ZMM14; ZMM15] ,,
     MAYCHANGE [memory :> bytes (stackpointer,256)] ,,
     MAYCHANGE SOME_FLAGS)`;;

let result =
    match
     (PURE_REWRITE_TAC [fst execth] THEN

     REWRITE_TAC[NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
     REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
     REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
     REWRITE_TAC[YMMENCODING_REGROUP] THEN CONV_TAC(DEPTH_CONV WORD_JOIN_CONV) THEN
     REWRITE_TAC[SOME_FLAGS] THEN ONCE_REWRITE_TAC[MESON[]
      `read RSP s = stackpointer /\ P (read RSP s) s <=>
       read RSP s = stackpointer /\ P stackpointer s`] THEN
     ENSURES_INIT_TAC "s0" THEN
     MAP_EVERY MEMORY_SPLIT_TAC (1--4) THEN

     X86_VSTEPS_TAC execth (1--length [1;2]) THEN

     MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN
     ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
     CONV_TAC(ONCE_DEPTH_CONV READ_MEMORY_MERGE_CONV) THEN
     ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
     PRINT_GOAL_TAC THEN ALL_TAC)
     ([],goal)
  with
    _,[_,endres],_ ->
  (if endres = `T` || only_undefinedness endres then
     let _ = print_string "I'm here" in
     let _ = print_term endres in
     (Format.print_string "Modulo undefinedness "; 1)
   else
     let _ = print_string "I'm here2" in
     let _ = print_term endres in
     let _,[_,gsd],_ =
      (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
       REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
       REWRITE_TAC[SOME_FLAGS]) ([],goal) in
      (print_qterm gsd; Format.print_newline(); 0))
  | _,[],_ -> 1 in
let _ = print_int result in
result