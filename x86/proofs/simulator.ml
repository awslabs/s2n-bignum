(*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0
 *)

(* ------------------------------------------------------------------------- *)
(* Encoding the registers and flags as a 16-element list of numbers.         *)
(* ------------------------------------------------------------------------- *)

needs "x86/proofs/base.ml";;

let regfile = new_definition
 `regfile s =
   [val(read RAX s); val(read RCX s); val(read RDX s); val(read RBX s);
    bitval(read CF s) +  4 * bitval(read PF s) + 16 * bitval(read AF s) +
    64 * bitval(read ZF s) + 128 * bitval(read SF s) +
    2048 * bitval(read OF s);
    val(read RBP s); val(read RSI s); val(read RDI s); val(read R8 s);
    val(read R9 s); val(read R10 s); val(read R11 s); val(read R12 s);
    val(read R13 s); val(read R14 s); val(read R15 s)]`;;

let FLAGENCODING_11 = prove
 (`bitval b0 + 4 * bitval b1 + 16 * bitval b2 +
   64 * bitval b3 + 128 * bitval b4 + 2048 * bitval b5 = n <=>
   n < 4096 /\
   (b0 <=> ODD n) /\
   ~ODD(n DIV 2) /\
   (b1 <=> ODD(n DIV 4)) /\
   ~ODD(n DIV 8) /\
   (b2 <=> ODD(n DIV 16)) /\
   ~ODD(n DIV 32) /\
   (b3 <=> ODD(n DIV 64)) /\
   (b4 <=> ODD(n DIV 128)) /\
   ~ODD(n DIV 256) /\
   ~ODD(n DIV 512) /\
   ~ODD(n DIV 1024) /\
   (b5 <=> ODD(n DIV 2048))`,
  REWRITE_TAC[bitval] THEN
  REPEAT(COND_CASES_TAC THEN ASM_REWRITE_TAC[]) THEN
  (EQ_TAC THENL [DISCH_THEN(SUBST1_TAC o SYM) THEN ARITH_TAC; ALL_TAC]) THEN
  STRIP_TAC THEN FIRST_X_ASSUM(MP_TAC o MATCH_MP MOD_LT) THEN
  REWRITE_TAC[ARITH_RULE
   `4096 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2`] THEN
  REWRITE_TAC[MOD_MULT_MOD] THEN REWRITE_TAC[DIV_DIV] THEN
  CONV_TAC NUM_REDUCE_CONV THEN
  ASM_REWRITE_TAC[MOD_2_CASES; GSYM NOT_ODD] THEN ARITH_TAC);;

(* ------------------------------------------------------------------------- *)
(* Random numbers with random bit density, random state for simulating.      *)
(* ------------------------------------------------------------------------- *)

let random_boold d = Random.int 64 < d;;

let randomnd n density =
    funpow n (fun n ->
      (if random_boold density then num_1 else num_0) +/ num_2 */ n) num_0;;

let random64() = randomnd 64 (Random.int 65);;

let random_regstate () =
  let d = Random.int 65 in
  map (fun _ -> randomnd 64 d) (0--3) @
  [Int(Random.int 256 land 0b11010101)] @
  [Int(4294967295)] @
  map (fun _ -> randomnd 64 d) (6--15);;

(* ------------------------------------------------------------------------- *)
(* Generate random instance of instruction class itself.                     *)
(* ------------------------------------------------------------------------- *)

let random_instruction iclasses =
  el (Random.int (length iclasses)) iclasses;;

(* ------------------------------------------------------------------------- *)
(* The iclasses to simulate.                                                 *)
(* This list is generated by running the following command at x86/proofs:    *)
(*    grep '^  0x' big*ml | grep '(\*' | grep -v '\[' | grep -v '\]' | \     *)
(*        grep -vi push | grep -vi pop | grep -wv RET | grep -wiv rsp | \    *)
(*        grep -v '\* J' | grep -v Memop | cut -f2 -d: | sort | uniq         *)
(* ------------------------------------------------------------------------- *)

let iclasses =
[[0x11; 0xc0];              (* ADC (% eax) (% eax) *)
 [0x11; 0xc9];              (* ADC (% ecx) (% ecx) *)
 [0x11; 0xed];              (* ADC (% ebp) (% ebp) *)
 [0x19; 0xc1];              (* SBB (% ecx) (% eax) *)
 [0x31; 0xc0];              (* XOR (% eax) (% eax) *)
 [0x31; 0xc9];              (* XOR (% ecx) (% ecx) *)
 [0x31; 0xd2];              (* XOR (% edx) (% edx) *)
 [0x31; 0xdb];              (* XOR (% ebx) (% ebx) *)
 [0x31; 0xed];              (* XOR (% ebp) (% ebp) *)
 [0x31; 0xf6];              (* XOR (% esi) (% esi) *)
 [0x31; 0xff];              (* XOR (% edi) (% edi) *)
 [0x41; 0x89; 0xe8];        (* MOV (% r8d) (% ebp) *)
 [0x41; 0x89; 0xe9];        (* MOV (% r9d) (% ebp) *)
 [0x45; 0x11; 0xc0];        (* ADC (% r8d) (% r8d) *)
 [0x45; 0x31; 0xc0];        (* XOR (% r8d) (% r8d) *)
 [0x45; 0x31; 0xc9];        (* XOR (% r9d) (% r9d) *)
 [0x45; 0x31; 0xd2];        (* XOR (% r10d) (% r10d) *)
 [0x45; 0x31; 0xdb];        (* XOR (% r11d) (% r11d) *)
 [0x45; 0x31; 0xe4];        (* XOR (% r12d) (% r12d) *)
 [0x45; 0x31; 0xed];        (* XOR (% r13d) (% r13d) *)
 [0x45; 0x31; 0xf6];        (* XOR (% r14d) (% r14d) *)
 [0x45; 0x31; 0xff];        (* XOR (% r15d) (% r15d) *)
 [0x48; 0x01; 0xc0];        (* ADD (% rax) (% rax) *)
 [0x48; 0x01; 0xc1];        (* ADD (% rcx) (% rax) *)
 [0x48; 0x01; 0xc2];        (* ADD (% rdx) (% rax) *)
 [0x48; 0x01; 0xc3];        (* ADD (% rbx) (% rax) *)
 [0x48; 0x01; 0xc5];        (* ADD (% rbp) (% rax) *)
 [0x48; 0x01; 0xc6];        (* ADD (% rsi) (% rax) *)
 [0x48; 0x01; 0xc7];        (* ADD (% rdi) (% rax) *)
 [0x48; 0x01; 0xc8];        (* ADD (% rax) (% rcx) *)
 [0x48; 0x01; 0xc9];        (* ADD (% rcx) (% rcx) *)
 [0x48; 0x01; 0xca];        (* ADD (% rdx) (% rcx) *)
 [0x48; 0x01; 0xd0];        (* ADD (% rax) (% rdx) *)
 [0x48; 0x01; 0xd1];        (* ADD (% rcx) (% rdx) *)
 [0x48; 0x01; 0xd2];        (* ADD (% rdx) (% rdx) *)
 [0x48; 0x01; 0xd6];        (* ADD (% rsi) (% rdx) *)
 [0x48; 0x01; 0xd7];        (* ADD (% rdi) (% rdx) *)
 [0x48; 0x01; 0xd8];        (* ADD (% rax) (% rbx) *)
 [0x48; 0x01; 0xda];        (* ADD (% rdx) (% rbx) *)
 [0x48; 0x01; 0xdb];        (* ADD (% rbx) (% rbx) *)
 [0x48; 0x01; 0xe8];        (* ADD (% rax) (% rbp) *)
 [0x48; 0x01; 0xf0];        (* ADD (% rax) (% rsi) *)
 [0x48; 0x01; 0xf1];        (* ADD (% rcx) (% rsi) *)
 [0x48; 0x01; 0xf2];        (* ADD (% rdx) (% rsi) *)
 [0x48; 0x01; 0xf8];        (* ADD (% rax) (% rdi) *)
 [0x48; 0x01; 0xfa];        (* ADD (% rdx) (% rdi) *)
 [0x48; 0x09; 0xc1];        (* OR (% rcx) (% rax) *)
 [0x48; 0x09; 0xc2];        (* OR (% rdx) (% rax) *)
 [0x48; 0x09; 0xc3];        (* OR (% rbx) (% rax) *)
 [0x48; 0x09; 0xc5];        (* OR (% rbp) (% rax) *)
 [0x48; 0x09; 0xc8];        (* OR (% rax) (% rcx) *)
 [0x48; 0x09; 0xca];        (* OR (% rdx) (% rcx) *)
 [0x48; 0x09; 0xcd];        (* OR (% rbp) (% rcx) *)
 [0x48; 0x09; 0xd0];        (* OR (% rax) (% rdx) *)
 [0x48; 0x09; 0xd1];        (* OR (% rcx) (% rdx) *)
 [0x48; 0x09; 0xd5];        (* OR (% rbp) (% rdx) *)
 [0x48; 0x09; 0xd8];        (* OR (% rax) (% rbx) *)
 [0x48; 0x09; 0xdd];        (* OR (% rbp) (% rbx) *)
 [0x48; 0x09; 0xe8];        (* OR (% rax) (% rbp) *)
 [0x48; 0x09; 0xf0];        (* OR (% rax) (% rsi) *)
 [0x48; 0x09; 0xf1];        (* OR (% rcx) (% rsi) *)
 [0x48; 0x0f; 0x42; 0xc2];  (* CMOVB (% rax) (% rdx) *)
 [0x48; 0x0f; 0x42; 0xc5];  (* CMOVB (% rax) (% rbp) *)
 [0x48; 0x0f; 0x42; 0xc8];  (* CMOVB (% rcx) (% rax) *)
 [0x48; 0x0f; 0x42; 0xca];  (* CMOVB (% rcx) (% rdx) *)
 [0x48; 0x0f; 0x42; 0xce];  (* CMOVB (% rcx) (% rsi) *)
 [0x48; 0x0f; 0x42; 0xcf];  (* CMOVB (% rcx) (% rdi) *)
 [0x48; 0x0f; 0x42; 0xd0];  (* CMOVB (% rdx) (% rax) *)
 [0x48; 0x0f; 0x42; 0xd5];  (* CMOVB (% rdx) (% rbp) *)
 [0x48; 0x0f; 0x42; 0xd7];  (* CMOVB (% rdx) (% rdi) *)
 [0x48; 0x0f; 0x42; 0xd9];  (* CMOVB (% rbx) (% rcx) *)
 [0x48; 0x0f; 0x42; 0xde];  (* CMOVB (% rbx) (% rsi) *)
 [0x48; 0x0f; 0x42; 0xe9];  (* CMOVB (% rbp) (% rcx) *)
 [0x48; 0x0f; 0x42; 0xf0];  (* CMOVB (% rsi) (% rax) *)
 [0x48; 0x0f; 0x42; 0xfb];  (* CMOVB (% rdi) (% rbx) *)
 [0x48; 0x0f; 0x43; 0xc7];  (* CMOVAE (% rax) (% rdi) *)
 [0x48; 0x0f; 0x43; 0xc8];  (* CMOVAE (% rcx) (% rax) *)
 [0x48; 0x0f; 0x44; 0xc5];  (* CMOVE (% rax) (% rbp) *)
 [0x48; 0x0f; 0x44; 0xc6];  (* CMOVE (% rax) (% rsi) *)
 [0x48; 0x0f; 0x44; 0xca];  (* CMOVE (% rcx) (% rdx) *)
 [0x48; 0x0f; 0x44; 0xd0];  (* CMOVE (% rdx) (% rax) *)
 [0x48; 0x0f; 0x44; 0xf2];  (* CMOVE (% rsi) (% rdx) *)
 [0x48; 0x0f; 0x44; 0xfd];  (* CMOVE (% rdi) (% rbp) *)
 [0x48; 0x0f; 0x45; 0xc2];  (* CMOVNE (% rax) (% rdx) *)
 [0x48; 0x0f; 0x45; 0xc3];  (* CMOVNE (% rax) (% rbx) *)
 [0x48; 0x0f; 0x45; 0xc8];  (* CMOVNE (% rcx) (% rax) *)
 [0x48; 0x0f; 0x45; 0xca];  (* CMOVNE (% rcx) (% rdx) *)
 [0x48; 0x0f; 0x45; 0xd1];  (* CMOVNE (% rdx) (% rcx) *)
 [0x48; 0x0f; 0x45; 0xd7];  (* CMOVNE (% rdx) (% rdi) *)
 [0x48; 0x0f; 0x45; 0xd9];  (* CMOVNE (% rbx) (% rcx) *)
 [0x48; 0x0f; 0x45; 0xea];  (* CMOVNE (% rbp) (% rdx) *)
 [0x48; 0x0f; 0x49; 0xc1];  (* CMOVNS (% rax) (% rcx) *)
 [0x48; 0x0f; 0x49; 0xc5];  (* CMOVNS (% rax) (% rbp) *)
 [0x48; 0x0f; 0x49; 0xdd];  (* CMOVNS (% rbx) (% rbp) *)
 [0x48; 0x0f; 0xa5; 0xf5];  (* SHLD (% rbp) (% rsi) (% cl) *)
 [0x48; 0x0f; 0xaf; 0xc0];  (* IMUL (% rax) (% rax) *)
 [0x48; 0x0f; 0xaf; 0xc2];  (* IMUL (% rax) (% rdx) *)
 [0x48; 0x0f; 0xaf; 0xc6];  (* IMUL (% rax) (% rsi) *)
 [0x48; 0x0f; 0xaf; 0xc8];  (* IMUL (% rcx) (% rax) *)
 [0x48; 0x0f; 0xaf; 0xc9];  (* IMUL (% rcx) (% rcx) *)
 [0x48; 0x0f; 0xaf; 0xd0];  (* IMUL (% rdx) (% rax) *)
 [0x48; 0x0f; 0xaf; 0xd1];  (* IMUL (% rdx) (% rcx) *)
 [0x48; 0x0f; 0xaf; 0xd2];  (* IMUL (% rdx) (% rdx) *)
 [0x48; 0x0f; 0xaf; 0xd8];  (* IMUL (% rbx) (% rax) *)
 [0x48; 0x0f; 0xaf; 0xdb];  (* IMUL (% rbx) (% rbx) *)
 [0x48; 0x0f; 0xaf; 0xe8];  (* IMUL (% rbp) (% rax) *)
 [0x48; 0x0f; 0xaf; 0xeb];  (* IMUL (% rbp) (% rbx) *)
 [0x48; 0x0f; 0xaf; 0xed];  (* IMUL (% rbp) (% rbp) *)
 [0x48; 0x0f; 0xbc; 0xc1];  (* BSF (% rax) (% rcx) *)
 [0x48; 0x0f; 0xbd; 0xc2];  (* BSR (% rax) (% rdx) *)
 [0x48; 0x0f; 0xbd; 0xc8];  (* BSR (% rcx) (% rax) *)
 [0x48; 0x0f; 0xbd; 0xc9];  (* BSR (% rcx) (% rcx) *)
 [0x48; 0x0f; 0xbd; 0xd2];  (* BSR (% rdx) (% rdx) *)
 [0x48; 0x0f; 0xc8];        (* BSWAP (% rax) *)
 [0x48; 0x0f; 0xca];        (* BSWAP (% rdx) *)
 [0x48; 0x11; 0xc0];        (* ADC (% rax) (% rax) *)
 [0x48; 0x11; 0xc1];        (* ADC (% rcx) (% rax) *)
 [0x48; 0x11; 0xc2];        (* ADC (% rdx) (% rax) *)
 [0x48; 0x11; 0xc3];        (* ADC (% rbx) (% rax) *)
 [0x48; 0x11; 0xc5];        (* ADC (% rbp) (% rax) *)
 [0x48; 0x11; 0xc6];        (* ADC (% rsi) (% rax) *)
 [0x48; 0x11; 0xc8];        (* ADC (% rax) (% rcx) *)
 [0x48; 0x11; 0xc9];        (* ADC (% rcx) (% rcx) *)
 [0x48; 0x11; 0xca];        (* ADC (% rdx) (% rcx) *)
 [0x48; 0x11; 0xce];        (* ADC (% rsi) (% rcx) *)
 [0x48; 0x11; 0xd0];        (* ADC (% rax) (% rdx) *)
 [0x48; 0x11; 0xd1];        (* ADC (% rcx) (% rdx) *)
 [0x48; 0x11; 0xd2];        (* ADC (% rdx) (% rdx) *)
 [0x48; 0x11; 0xd3];        (* ADC (% rbx) (% rdx) *)
 [0x48; 0x11; 0xd5];        (* ADC (% rbp) (% rdx) *)
 [0x48; 0x11; 0xd6];        (* ADC (% rsi) (% rdx) *)
 [0x48; 0x11; 0xd7];        (* ADC (% rdi) (% rdx) *)
 [0x48; 0x11; 0xd8];        (* ADC (% rax) (% rbx) *)
 [0x48; 0x11; 0xd9];        (* ADC (% rcx) (% rbx) *)
 [0x48; 0x11; 0xda];        (* ADC (% rdx) (% rbx) *)
 [0x48; 0x11; 0xdb];        (* ADC (% rbx) (% rbx) *)
 [0x48; 0x11; 0xdd];        (* ADC (% rbp) (% rbx) *)
 [0x48; 0x11; 0xe9];        (* ADC (% rcx) (% rbp) *)
 [0x48; 0x11; 0xeb];        (* ADC (% rbx) (% rbp) *)
 [0x48; 0x11; 0xed];        (* ADC (% rbp) (% rbp) *)
 [0x48; 0x11; 0xf0];        (* ADC (% rax) (% rsi) *)
 [0x48; 0x11; 0xf1];        (* ADC (% rcx) (% rsi) *)
 [0x48; 0x11; 0xf2];        (* ADC (% rdx) (% rsi) *)
 [0x48; 0x19; 0xc0];        (* SBB (% rax) (% rax) *)
 [0x48; 0x19; 0xc1];        (* SBB (% rcx) (% rax) *)
 [0x48; 0x19; 0xc3];        (* SBB (% rbx) (% rax) *)
 [0x48; 0x19; 0xc5];        (* SBB (% rbp) (% rax) *)
 [0x48; 0x19; 0xc6];        (* SBB (% rsi) (% rax) *)
 [0x48; 0x19; 0xc7];        (* SBB (% rdi) (% rax) *)
 [0x48; 0x19; 0xc9];        (* SBB (% rcx) (% rcx) *)
 [0x48; 0x19; 0xca];        (* SBB (% rdx) (% rcx) *)
 [0x48; 0x19; 0xd1];        (* SBB (% rcx) (% rdx) *)
 [0x48; 0x19; 0xd2];        (* SBB (% rdx) (% rdx) *)
 [0x48; 0x19; 0xd3];        (* SBB (% rbx) (% rdx) *)
 [0x48; 0x19; 0xd6];        (* SBB (% rsi) (% rdx) *)
 [0x48; 0x19; 0xd7];        (* SBB (% rdi) (% rdx) *)
 [0x48; 0x19; 0xd8];        (* SBB (% rax) (% rbx) *)
 [0x48; 0x19; 0xda];        (* SBB (% rdx) (% rbx) *)
 [0x48; 0x19; 0xdb];        (* SBB (% rbx) (% rbx) *)
 [0x48; 0x19; 0xed];        (* SBB (% rbp) (% rbp) *)
 [0x48; 0x19; 0xf1];        (* SBB (% rcx) (% rsi) *)
 [0x48; 0x19; 0xf2];        (* SBB (% rdx) (% rsi) *)
 [0x48; 0x19; 0xf6];        (* SBB (% rsi) (% rsi) *)
 [0x48; 0x21; 0xc1];        (* AND (% rcx) (% rax) *)
 [0x48; 0x21; 0xc2];        (* AND (% rdx) (% rax) *)
 [0x48; 0x21; 0xc3];        (* AND (% rbx) (% rax) *)
 [0x48; 0x21; 0xc6];        (* AND (% rsi) (% rax) *)
 [0x48; 0x21; 0xc8];        (* AND (% rax) (% rcx) *)
 [0x48; 0x21; 0xca];        (* AND (% rdx) (% rcx) *)
 [0x48; 0x21; 0xd0];        (* AND (% rax) (% rdx) *)
 [0x48; 0x21; 0xd1];        (* AND (% rcx) (% rdx) *)
 [0x48; 0x21; 0xd3];        (* AND (% rbx) (% rdx) *)
 [0x48; 0x21; 0xd8];        (* AND (% rax) (% rbx) *)
 [0x48; 0x21; 0xda];        (* AND (% rdx) (% rbx) *)
 [0x48; 0x21; 0xe8];        (* AND (% rax) (% rbp) *)
 [0x48; 0x21; 0xf0];        (* AND (% rax) (% rsi) *)
 [0x48; 0x21; 0xf1];        (* AND (% rcx) (% rsi) *)
 [0x48; 0x21; 0xf2];        (* AND (% rdx) (% rsi) *)
 [0x48; 0x29; 0xc1];        (* SUB (% rcx) (% rax) *)
 [0x48; 0x29; 0xc2];        (* SUB (% rdx) (% rax) *)
 [0x48; 0x29; 0xc3];        (* SUB (% rbx) (% rax) *)
 [0x48; 0x29; 0xc6];        (* SUB (% rsi) (% rax) *)
 [0x48; 0x29; 0xc7];        (* SUB (% rdi) (% rax) *)
 [0x48; 0x29; 0xc8];        (* SUB (% rax) (% rcx) *)
 [0x48; 0x29; 0xca];        (* SUB (% rdx) (% rcx) *)
 [0x48; 0x29; 0xcb];        (* SUB (% rbx) (% rcx) *)
 [0x48; 0x29; 0xce];        (* SUB (% rsi) (% rcx) *)
 [0x48; 0x29; 0xcf];        (* SUB (% rdi) (% rcx) *)
 [0x48; 0x29; 0xd0];        (* SUB (% rax) (% rdx) *)
 [0x48; 0x29; 0xd1];        (* SUB (% rcx) (% rdx) *)
 [0x48; 0x29; 0xd3];        (* SUB (% rbx) (% rdx) *)
 [0x48; 0x29; 0xd5];        (* SUB (% rbp) (% rdx) *)
 [0x48; 0x29; 0xd6];        (* SUB (% rsi) (% rdx) *)
 [0x48; 0x29; 0xd7];        (* SUB (% rdi) (% rdx) *)
 [0x48; 0x29; 0xd8];        (* SUB (% rax) (% rbx) *)
 [0x48; 0x29; 0xda];        (* SUB (% rdx) (% rbx) *)
 [0x48; 0x29; 0xdf];        (* SUB (% rdi) (% rbx) *)
 [0x48; 0x29; 0xea];        (* SUB (% rdx) (% rbp) *)
 [0x48; 0x29; 0xf0];        (* SUB (% rax) (% rsi) *)
 [0x48; 0x29; 0xf2];        (* SUB (% rdx) (% rsi) *)
 [0x48; 0x29; 0xfa];        (* SUB (% rdx) (% rdi) *)
 [0x48; 0x31; 0xc0];        (* XOR (% rax) (% rax) *)
 [0x48; 0x31; 0xc1];        (* XOR (% rcx) (% rax) *)
 [0x48; 0x31; 0xc2];        (* XOR (% rdx) (% rax) *)
 [0x48; 0x31; 0xc9];        (* XOR (% rcx) (% rcx) *)
 [0x48; 0x31; 0xca];        (* XOR (% rdx) (% rcx) *)
 [0x48; 0x31; 0xd0];        (* XOR (% rax) (% rdx) *)
 [0x48; 0x31; 0xd1];        (* XOR (% rcx) (% rdx) *)
 [0x48; 0x31; 0xd2];        (* XOR (% rdx) (% rdx) *)
 [0x48; 0x31; 0xdb];        (* XOR (% rbx) (% rbx) *)
 [0x48; 0x31; 0xe8];        (* XOR (% rax) (% rbp) *)
 [0x48; 0x31; 0xeb];        (* XOR (% rbx) (% rbp) *)
 [0x48; 0x31; 0xed];        (* XOR (% rbp) (% rbp) *)
 [0x48; 0x31; 0xee];        (* XOR (% rsi) (% rbp) *)
 [0x48; 0x31; 0xf0];        (* XOR (% rax) (% rsi) *)
 [0x48; 0x31; 0xf1];        (* XOR (% rcx) (% rsi) *)
 [0x48; 0x31; 0xf6];        (* XOR (% rsi) (% rsi) *)
 [0x48; 0x31; 0xff];        (* XOR (% rdi) (% rdi) *)
 [0x48; 0x39; 0xce];        (* CMP (% rsi) (% rcx) *)
 [0x48; 0x39; 0xcf];        (* CMP (% rdi) (% rcx) *)
 [0x48; 0x39; 0xd0];        (* CMP (% rax) (% rdx) *)
 [0x48; 0x39; 0xd1];        (* CMP (% rcx) (% rdx) *)
 [0x48; 0x39; 0xd7];        (* CMP (% rdi) (% rdx) *)
 [0x48; 0x39; 0xf9];        (* CMP (% rcx) (% rdi) *)
 [0x48; 0x39; 0xfa];        (* CMP (% rdx) (% rdi) *)
 [0x48; 0x39; 0xfb];        (* CMP (% rbx) (% rdi) *)
 [0x48; 0x39; 0xfd];        (* CMP (% rbp) (% rdi) *)
 [0x48; 0x6b; 0xc0; 0x13];  (* IMUL3 (% rax) (% rax,Imm8 (word 19)) *)
 [0x48; 0x6b; 0xc9; 0x05];  (* IMUL3 (% rcx) (% rcx,Imm8 (word 5)) *)
 [0x48; 0x6b; 0xc9; 0x13];  (* IMUL3 (% rcx) (% rcx,Imm8 (word 19)) *)
 [0x48; 0x6b; 0xdb; 0x13];  (* IMUL3 (% rbx) (% rbx,Imm8 (word 19)) *)
 [0x48; 0x83; 0xc0; 0x01];  (* ADD (% rax) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc1; 0x01];  (* ADD (% rcx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc1; 0x08];  (* ADD (% rcx) (Imm8 (word 8)) *)
 [0x48; 0x83; 0xc2; 0x01];  (* ADD (% rdx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc3; 0x01];  (* ADD (% rbx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc5; 0x01];  (* ADD (% rbp) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc5; 0x40];  (* ADD (% rbp) (Imm8 (word 64)) *)
 [0x48; 0x83; 0xc6; 0x01];  (* ADD (% rsi) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xc6; 0x08];  (* ADD (% rsi) (Imm8 (word 8)) *)
 [0x48; 0x83; 0xc6; 0x40];  (* ADD (% rsi) (Imm8 (word 64)) *)
 [0x48; 0x83; 0xc7; 0x40];  (* ADD (% rdi) (Imm8 (word 64)) *)
 [0x48; 0x83; 0xd0; 0x00];  (* ADC (% rax) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd0; 0xff];  (* ADC (% rax) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xd1; 0x00];  (* ADC (% rcx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd2; 0x00];  (* ADC (% rdx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd2; 0x01];  (* ADC (% rdx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xd2; 0xff];  (* ADC (% rdx) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xd3; 0x00];  (* ADC (% rbx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd5; 0x00];  (* ADC (% rbp) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd5; 0xff];  (* ADC (% rbp) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xd6; 0x00];  (* ADC (% rsi) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd6; 0x01];  (* ADC (% rsi) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xd6; 0xff];  (* ADC (% rsi) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xd8; 0x00];  (* SBB (% rax) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xd9; 0x00];  (* SBB (% rcx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xda; 0x00];  (* SBB (% rdx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xdb; 0x00];  (* SBB (% rbx) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xdd; 0x00];  (* SBB (% rbp) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xde; 0x00];  (* SBB (% rsi) (Imm8 (word 0)) *)
 [0x48; 0x83; 0xe0; 0x01];  (* AND (% rax) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe1; 0x01];  (* AND (% rcx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe1; 0x13];  (* AND (% rcx) (Imm8 (word 19)) *)
 [0x48; 0x83; 0xe2; 0x01];  (* AND (% rdx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe2; 0x05];  (* AND (% rdx) (Imm8 (word 5)) *)
 [0x48; 0x83; 0xe3; 0x01];  (* AND (% rbx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe7; 0x01];  (* AND (% rdi) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe8; 0x01];  (* SUB (% rax) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xe8; 0x3f];  (* SUB (% rax) (Imm8 (word 63)) *)
 [0x48; 0x83; 0xe8; 0xff];  (* SUB (% rax) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xe9; 0x01];  (* SUB (% rcx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xea; 0x01];  (* SUB (% rdx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xea; 0xff];  (* SUB (% rdx) (Imm8 (word 255)) *)
 [0x48; 0x83; 0xeb; 0x01];  (* SUB (% rbx) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xee; 0x04];  (* SUB (% rsi) (Imm8 (word 4)) *)
 [0x48; 0x83; 0xee; 0x06];  (* SUB (% rsi) (Imm8 (word 6)) *)
 [0x48; 0x83; 0xef; 0x02];  (* SUB (% rdi) (Imm8 (word 2)) *)
 [0x48; 0x83; 0xf0; 0x01];  (* XOR (% rax) (Imm8 (word 1)) *)
 [0x48; 0x83; 0xf0; 0x3f];  (* XOR (% rax) (Imm8 (word 63)) *)
 [0x48; 0x83; 0xf1; 0x3f];  (* XOR (% rcx) (Imm8 (word 63)) *)
 [0x48; 0x83; 0xf3; 0x02];  (* XOR (% rbx) (Imm8 (word 2)) *)
 [0x48; 0x83; 0xf9; 0x40];  (* CMP (% rcx) (Imm8 (word 64)) *)
 [0x48; 0x83; 0xfe; 0x04];  (* CMP (% rsi) (Imm8 (word 4)) *)
 [0x48; 0x83; 0xfe; 0x06];  (* CMP (% rsi) (Imm8 (word 6)) *)
 [0x48; 0x83; 0xff; 0x01];  (* CMP (% rdi) (Imm8 (word 1)) *)
 [0x48; 0x85; 0xc0];        (* TEST (% rax) (% rax) *)
 [0x48; 0x85; 0xc9];        (* TEST (% rcx) (% rcx) *)
 [0x48; 0x85; 0xd1];        (* TEST (% rcx) (% rdx) *)
 [0x48; 0x85; 0xd2];        (* TEST (% rdx) (% rdx) *)
 [0x48; 0x85; 0xdb];        (* TEST (% rbx) (% rbx) *)
 [0x48; 0x85; 0xed];        (* TEST (% rbp) (% rbp) *)
 [0x48; 0x85; 0xf6];        (* TEST (% rsi) (% rsi) *)
 [0x48; 0x85; 0xff];        (* TEST (% rdi) (% rdi) *)
 [0x48; 0x89; 0xc1];        (* MOV (% rcx) (% rax) *)
 [0x48; 0x89; 0xc2];        (* MOV (% rdx) (% rax) *)
 [0x48; 0x89; 0xc3];        (* MOV (% rbx) (% rax) *)
 [0x48; 0x89; 0xc5];        (* MOV (% rbp) (% rax) *)
 [0x48; 0x89; 0xc6];        (* MOV (% rsi) (% rax) *)
 [0x48; 0x89; 0xc7];        (* MOV (% rdi) (% rax) *)
 [0x48; 0x89; 0xc8];        (* MOV (% rax) (% rcx) *)
 [0x48; 0x89; 0xca];        (* MOV (% rdx) (% rcx) *)
 [0x48; 0x89; 0xcb];        (* MOV (% rbx) (% rcx) *)
 [0x48; 0x89; 0xce];        (* MOV (% rsi) (% rcx) *)
 [0x48; 0x89; 0xd0];        (* MOV (% rax) (% rdx) *)
 [0x48; 0x89; 0xd1];        (* MOV (% rcx) (% rdx) *)
 [0x48; 0x89; 0xd3];        (* MOV (% rbx) (% rdx) *)
 [0x48; 0x89; 0xd5];        (* MOV (% rbp) (% rdx) *)
 [0x48; 0x89; 0xd6];        (* MOV (% rsi) (% rdx) *)
 [0x48; 0x89; 0xd7];        (* MOV (% rdi) (% rdx) *)
 [0x48; 0x89; 0xd8];        (* MOV (% rax) (% rbx) *)
 [0x48; 0x89; 0xd9];        (* MOV (% rcx) (% rbx) *)
 [0x48; 0x89; 0xda];        (* MOV (% rdx) (% rbx) *)
 [0x48; 0x89; 0xde];        (* MOV (% rsi) (% rbx) *)
 [0x48; 0x89; 0xdf];        (* MOV (% rdi) (% rbx) *)
 [0x48; 0x89; 0xe8];        (* MOV (% rax) (% rbp) *)
 [0x48; 0x89; 0xea];        (* MOV (% rdx) (% rbp) *)
 [0x48; 0x89; 0xeb];        (* MOV (% rbx) (% rbp) *)
 [0x48; 0x89; 0xee];        (* MOV (% rsi) (% rbp) *)
 [0x48; 0x89; 0xf0];        (* MOV (% rax) (% rsi) *)
 [0x48; 0x89; 0xf1];        (* MOV (% rcx) (% rsi) *)
 [0x48; 0x89; 0xf2];        (* MOV (% rdx) (% rsi) *)
 [0x48; 0x89; 0xf5];        (* MOV (% rbp) (% rsi) *)
 [0x48; 0x89; 0xf8];        (* MOV (% rax) (% rdi) *)
 [0x48; 0x89; 0xf9];        (* MOV (% rcx) (% rdi) *)
 [0x48; 0x89; 0xfa];        (* MOV (% rdx) (% rdi) *)
 [0x48; 0x89; 0xfb];        (* MOV (% rbx) (% rdi) *)
 [0x48; 0x8d; 0x04; 0x17];  (* LEA (% rax) (%%% (rdi,0,rdx)) *)
 [0x48; 0x8d; 0x04; 0xf8];  (* LEA (% rax) (%%% (rax,3,rdi)) *)
 [0x48; 0x8d; 0x0c; 0x01];  (* LEA (% rcx) (%%% (rcx,0,rax)) *)
 [0x48; 0x8d; 0x0c; 0x39];  (* LEA (% rcx) (%%% (rcx,0,rdi)) *)
 [0x48; 0x8d; 0x14; 0x03];  (* LEA (% rdx) (%%% (rbx,0,rax)) *)
 [0x48; 0x8d; 0x1c; 0x03];  (* LEA (% rbx) (%%% (rbx,0,rax)) *)
 [0x48; 0x8d; 0x1c; 0x3f];  (* LEA (% rbx) (%%% (rdi,0,rdi)) *)
 [0x48; 0x8d; 0x34; 0x46];  (* LEA (% rsi) (%%% (rsi,1,rax)) *)
 [0x48; 0x8d; 0x3c; 0x01];  (* LEA (% rdi) (%%% (rcx,0,rax)) *)
 [0x48; 0x8d; 0x42; 0x01];  (* LEA (% rax) (%% (rdx,1)) *)
 [0x48; 0x8d; 0x48; 0xed];  (* LEA (% rcx) (%% (rax,18446744073709551597)) *)
 [0x48; 0x8d; 0x49; 0x02];  (* LEA (% rcx) (%% (rcx,2)) *)
 [0x48; 0x8d; 0x4b; 0x01];  (* LEA (% rcx) (%% (rbx,1)) *)
 [0x48; 0x8d; 0x51; 0x01];  (* LEA (% rdx) (%% (rcx,1)) *)
 [0x48; 0x8d; 0x52; 0x02];  (* LEA (% rdx) (%% (rdx,2)) *)
 [0x48; 0x8d; 0x52; 0xff];  (* LEA (% rdx) (%% (rdx,18446744073709551615)) *)
 [0x48; 0x8d; 0x56; 0x01];  (* LEA (% rdx) (%% (rsi,1)) *)
 [0x48; 0x8d; 0x59; 0x01];  (* LEA (% rbx) (%% (rcx,1)) *)
 [0x48; 0x8d; 0x5b; 0x02];  (* LEA (% rbx) (%% (rbx,2)) *)
 [0x48; 0x8d; 0x5b; 0xff];  (* LEA (% rbx) (%% (rbx,18446744073709551615)) *)
 [0x48; 0x8d; 0x5f; 0xff];  (* LEA (% rbx) (%% (rdi,18446744073709551615)) *)
 [0x48; 0x8d; 0x6d; 0xff];  (* LEA (% rbp) (%% (rbp,18446744073709551615)) *)
 [0x48; 0x8d; 0x76; 0x40];  (* LEA (% rsi) (%% (rsi,64)) *)
 [0x48; 0xc1; 0xe0; 0x02];  (* SHL (% rax) (Imm8 (word 2)) *)
 [0x48; 0xc1; 0xe0; 0x06];  (* SHL (% rax) (Imm8 (word 6)) *)
 [0x48; 0xc1; 0xe0; 0x07];  (* SHL (% rax) (Imm8 (word 7)) *)
 [0x48; 0xc1; 0xe0; 0x09];  (* SHL (% rax) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xe0; 0x20];  (* SHL (% rax) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe0; 0x3f];  (* SHL (% rax) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xe1; 0x02];  (* SHL (% rcx) (Imm8 (word 2)) *)
 [0x48; 0xc1; 0xe1; 0x20];  (* SHL (% rcx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe1; 0x37];  (* SHL (% rcx) (Imm8 (word 55)) *)
 [0x48; 0xc1; 0xe1; 0x3f];  (* SHL (% rcx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xe2; 0x02];  (* SHL (% rdx) (Imm8 (word 2)) *)
 [0x48; 0xc1; 0xe2; 0x06];  (* SHL (% rdx) (Imm8 (word 6)) *)
 [0x48; 0xc1; 0xe2; 0x16];  (* SHL (% rdx) (Imm8 (word 22)) *)
 [0x48; 0xc1; 0xe2; 0x20];  (* SHL (% rdx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe2; 0x23];  (* SHL (% rdx) (Imm8 (word 35)) *)
 [0x48; 0xc1; 0xe3; 0x02];  (* SHL (% rbx) (Imm8 (word 2)) *)
 [0x48; 0xc1; 0xe3; 0x06];  (* SHL (% rbx) (Imm8 (word 6)) *)
 [0x48; 0xc1; 0xe3; 0x09];  (* SHL (% rbx) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xe3; 0x20];  (* SHL (% rbx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe3; 0x36];  (* SHL (% rbx) (Imm8 (word 54)) *)
 [0x48; 0xc1; 0xe3; 0x3f];  (* SHL (% rbx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xe5; 0x02];  (* SHL (% rbp) (Imm8 (word 2)) *)
 [0x48; 0xc1; 0xe6; 0x20];  (* SHL (% rsi) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe7; 0x06];  (* SHL (% rdi) (Imm8 (word 6)) *)
 [0x48; 0xc1; 0xe7; 0x16];  (* SHL (% rdi) (Imm8 (word 22)) *)
 [0x48; 0xc1; 0xe8; 0x09];  (* SHR (% rax) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xe8; 0x1e];  (* SHR (% rax) (Imm8 (word 30)) *)
 [0x48; 0xc1; 0xe8; 0x20];  (* SHR (% rax) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe8; 0x21];  (* SHR (% rax) (Imm8 (word 33)) *)
 [0x48; 0xc1; 0xe8; 0x31];  (* SHR (% rax) (Imm8 (word 49)) *)
 [0x48; 0xc1; 0xe8; 0x37];  (* SHR (% rax) (Imm8 (word 55)) *)
 [0x48; 0xc1; 0xe8; 0x3f];  (* SHR (% rax) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xe9; 0x09];  (* SHR (% rcx) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xe9; 0x20];  (* SHR (% rcx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xe9; 0x3c];  (* SHR (% rcx) (Imm8 (word 60)) *)
 [0x48; 0xc1; 0xe9; 0x3f];  (* SHR (% rcx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xea; 0x06];  (* SHR (% rdx) (Imm8 (word 6)) *)
 [0x48; 0xc1; 0xea; 0x09];  (* SHR (% rdx) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xea; 0x11];  (* SHR (% rdx) (Imm8 (word 17)) *)
 [0x48; 0xc1; 0xea; 0x18];  (* SHR (% rdx) (Imm8 (word 24)) *)
 [0x48; 0xc1; 0xea; 0x20];  (* SHR (% rdx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xea; 0x21];  (* SHR (% rdx) (Imm8 (word 33)) *)
 [0x48; 0xc1; 0xea; 0x22];  (* SHR (% rdx) (Imm8 (word 34)) *)
 [0x48; 0xc1; 0xea; 0x24];  (* SHR (% rdx) (Imm8 (word 36)) *)
 [0x48; 0xc1; 0xea; 0x37];  (* SHR (% rdx) (Imm8 (word 55)) *)
 [0x48; 0xc1; 0xea; 0x3f];  (* SHR (% rdx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xeb; 0x20];  (* SHR (% rbx) (Imm8 (word 32)) *)
 [0x48; 0xc1; 0xeb; 0x3c];  (* SHR (% rbx) (Imm8 (word 60)) *)
 [0x48; 0xc1; 0xed; 0x09];  (* SHR (% rbp) (Imm8 (word 9)) *)
 [0x48; 0xc1; 0xed; 0x37];  (* SHR (% rbp) (Imm8 (word 55)) *)
 [0x48; 0xc1; 0xef; 0x03];  (* SHR (% rdi) (Imm8 (word 3)) *)
 [0x48; 0xc1; 0xf8; 0x3f];  (* SAR (% rax) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xf9; 0x2a];  (* SAR (% rcx) (Imm8 (word 42)) *)
 [0x48; 0xc1; 0xf9; 0x3f];  (* SAR (% rcx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xfa; 0x2b];  (* SAR (% rdx) (Imm8 (word 43)) *)
 [0x48; 0xc1; 0xfa; 0x3f];  (* SAR (% rdx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xfb; 0x2a];  (* SAR (% rbx) (Imm8 (word 42)) *)
 [0x48; 0xc1; 0xfb; 0x3f];  (* SAR (% rbx) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xfd; 0x3f];  (* SAR (% rbp) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xfe; 0x3f];  (* SAR (% rsi) (Imm8 (word 63)) *)
 [0x48; 0xc1; 0xff; 0x2b];  (* SAR (% rdi) (Imm8 (word 43)) *)
 [0x48; 0xd1; 0xda];        (* RCR (% rdx) (Imm8 (word 1)) *)
 [0x48; 0xd1; 0xe1];        (* SHL (% rcx) (Imm8 (word 1)) *)
 [0x48; 0xd1; 0xef];        (* SHR (% rdi) (Imm8 (word 1)) *)
 [0x48; 0xd1; 0xf9];        (* SAR (% rcx) (Imm8 (word 1)) *)
 [0x48; 0xd3; 0xe0];        (* SHL (% rax) (% cl) *)
 [0x48; 0xd3; 0xea];        (* SHR (% rdx) (% cl) *)
 [0x48; 0xd3; 0xef];        (* SHR (% rdi) (% cl) *)
 [0x48; 0xf7; 0xd0];        (* NOT (% rax) *)
 [0x48; 0xf7; 0xd1];        (* NOT (% rcx) *)
 [0x48; 0xf7; 0xd2];        (* NOT (% rdx) *)
 [0x48; 0xf7; 0xd3];        (* NOT (% rbx) *)
 [0x48; 0xf7; 0xd5];        (* NOT (% rbp) *)
 [0x48; 0xf7; 0xd6];        (* NOT (% rsi) *)
 [0x48; 0xf7; 0xd8];        (* NEG (% rax) *)
 [0x48; 0xf7; 0xd9];        (* NEG (% rcx) *)
 [0x48; 0xf7; 0xda];        (* NEG (% rdx) *)
 [0x48; 0xf7; 0xdb];        (* NEG (% rbx) *)
 [0x48; 0xf7; 0xdd];        (* NEG (% rbp) *)
 [0x48; 0xf7; 0xde];        (* NEG (% rsi) *)
 [0x48; 0xf7; 0xdf];        (* NEG (% rdi) *)
 [0x48; 0xf7; 0xe0];        (* MUL2 (% rdx,% rax) (% rax) *)
 [0x48; 0xf7; 0xe1];        (* MUL2 (% rdx,% rax) (% rcx) *)
 [0x48; 0xf7; 0xe2];        (* MUL2 (% rdx,% rax) (% rdx) *)
 [0x48; 0xf7; 0xe3];        (* MUL2 (% rdx,% rax) (% rbx) *)
 [0x48; 0xf7; 0xe5];        (* MUL2 (% rdx,% rax) (% rbp) *)
 [0x48; 0xf7; 0xe6];        (* MUL2 (% rdx,% rax) (% rsi) *)
 [0x48; 0xf7; 0xe7];        (* MUL2 (% rdx,% rax) (% rdi) *)
 [0x48; 0xf7; 0xea];        (* IMUL2 (% rdx,% rax) (% rdx) *)
 [0x48; 0xf7; 0xeb];        (* IMUL2 (% rdx,% rax) (% rbx) *)
 [0x48; 0xff; 0xc0];        (* INC (% rax) *)
 [0x48; 0xff; 0xc1];        (* INC (% rcx) *)
 [0x48; 0xff; 0xc2];        (* INC (% rdx) *)
 [0x48; 0xff; 0xc3];        (* INC (% rbx) *)
 [0x48; 0xff; 0xc5];        (* INC (% rbp) *)
 [0x48; 0xff; 0xc7];        (* INC (% rdi) *)
 [0x48; 0xff; 0xc9];        (* DEC (% rcx) *)
 [0x48; 0xff; 0xca];        (* DEC (% rdx) *)
 [0x48; 0xff; 0xcb];        (* DEC (% rbx) *)
 [0x48; 0xff; 0xce];        (* DEC (% rsi) *)
 [0x48; 0xff; 0xcf];        (* DEC (% rdi) *)
 [0x49; 0x01; 0xc0];        (* ADD (% r8) (% rax) *)
 [0x49; 0x01; 0xc1];        (* ADD (% r9) (% rax) *)
 [0x49; 0x01; 0xc2];        (* ADD (% r10) (% rax) *)
 [0x49; 0x01; 0xc3];        (* ADD (% r11) (% rax) *)
 [0x49; 0x01; 0xc4];        (* ADD (% r12) (% rax) *)
 [0x49; 0x01; 0xc5];        (* ADD (% r13) (% rax) *)
 [0x49; 0x01; 0xc6];        (* ADD (% r14) (% rax) *)
 [0x49; 0x01; 0xc7];        (* ADD (% r15) (% rax) *)
 [0x49; 0x01; 0xc8];        (* ADD (% r8) (% rcx) *)
 [0x49; 0x01; 0xc9];        (* ADD (% r9) (% rcx) *)
 [0x49; 0x01; 0xca];        (* ADD (% r10) (% rcx) *)
 [0x49; 0x01; 0xcb];        (* ADD (% r11) (% rcx) *)
 [0x49; 0x01; 0xcc];        (* ADD (% r12) (% rcx) *)
 [0x49; 0x01; 0xcd];        (* ADD (% r13) (% rcx) *)
 [0x49; 0x01; 0xd0];        (* ADD (% r8) (% rdx) *)
 [0x49; 0x01; 0xd1];        (* ADD (% r9) (% rdx) *)
 [0x49; 0x01; 0xd2];        (* ADD (% r10) (% rdx) *)
 [0x49; 0x01; 0xd3];        (* ADD (% r11) (% rdx) *)
 [0x49; 0x01; 0xd4];        (* ADD (% r12) (% rdx) *)
 [0x49; 0x01; 0xd6];        (* ADD (% r14) (% rdx) *)
 [0x49; 0x01; 0xd7];        (* ADD (% r15) (% rdx) *)
 [0x49; 0x01; 0xd8];        (* ADD (% r8) (% rbx) *)
 [0x49; 0x01; 0xd9];        (* ADD (% r9) (% rbx) *)
 [0x49; 0x01; 0xda];        (* ADD (% r10) (% rbx) *)
 [0x49; 0x01; 0xdb];        (* ADD (% r11) (% rbx) *)
 [0x49; 0x01; 0xdc];        (* ADD (% r12) (% rbx) *)
 [0x49; 0x01; 0xdd];        (* ADD (% r13) (% rbx) *)
 [0x49; 0x01; 0xde];        (* ADD (% r14) (% rbx) *)
 [0x49; 0x01; 0xdf];        (* ADD (% r15) (% rbx) *)
 [0x49; 0x01; 0xed];        (* ADD (% r13) (% rbp) *)
 [0x49; 0x01; 0xf0];        (* ADD (% r8) (% rsi) *)
 [0x49; 0x01; 0xf9];        (* ADD (% r9) (% rdi) *)
 [0x49; 0x01; 0xfd];        (* ADD (% r13) (% rdi) *)
 [0x49; 0x09; 0xca];        (* OR (% r10) (% rcx) *)
 [0x49; 0x09; 0xf0];        (* OR (% r8) (% rsi) *)
 [0x49; 0x09; 0xf1];        (* OR (% r9) (% rsi) *)
 [0x49; 0x0f; 0x42; 0xc2];  (* CMOVB (% rax) (% r10) *)
 [0x49; 0x0f; 0x42; 0xc7];  (* CMOVB (% rax) (% r15) *)
 [0x49; 0x0f; 0x42; 0xca];  (* CMOVB (% rcx) (% r10) *)
 [0x49; 0x0f; 0x42; 0xd2];  (* CMOVB (% rdx) (% r10) *)
 [0x49; 0x0f; 0x42; 0xd3];  (* CMOVB (% rdx) (% r11) *)
 [0x49; 0x0f; 0x42; 0xda];  (* CMOVB (% rbx) (% r10) *)
 [0x49; 0x0f; 0x42; 0xdf];  (* CMOVB (% rbx) (% r15) *)
 [0x49; 0x0f; 0x42; 0xec];  (* CMOVB (% rbp) (% r12) *)
 [0x49; 0x0f; 0x42; 0xf3];  (* CMOVB (% rsi) (% r11) *)
 [0x49; 0x0f; 0x42; 0xf5];  (* CMOVB (% rsi) (% r13) *)
 [0x49; 0x0f; 0x42; 0xfa];  (* CMOVB (% rdi) (% r10) *)
 [0x49; 0x0f; 0x43; 0xc3];  (* CMOVAE (% rax) (% r11) *)
 [0x49; 0x0f; 0x44; 0xc0];  (* CMOVE (% rax) (% r8) *)
 [0x49; 0x0f; 0x44; 0xc1];  (* CMOVE (% rax) (% r9) *)
 [0x49; 0x0f; 0x44; 0xc2];  (* CMOVE (% rax) (% r10) *)
 [0x49; 0x0f; 0x44; 0xd0];  (* CMOVE (% rdx) (% r8) *)
 [0x49; 0x0f; 0x44; 0xd1];  (* CMOVE (% rdx) (% r9) *)
 [0x49; 0x0f; 0x44; 0xf2];  (* CMOVE (% rsi) (% r10) *)
 [0x49; 0x0f; 0x45; 0xc0];  (* CMOVNE (% rax) (% r8) *)
 [0x49; 0x0f; 0x45; 0xca];  (* CMOVNE (% rcx) (% r10) *)
 [0x49; 0x0f; 0x45; 0xd9];  (* CMOVNE (% rbx) (% r9) *)
 [0x49; 0x0f; 0x45; 0xdb];  (* CMOVNE (% rbx) (% r11) *)
 [0x49; 0x0f; 0x45; 0xeb];  (* CMOVNE (% rbp) (% r11) *)
 [0x49; 0x0f; 0x45; 0xec];  (* CMOVNE (% rbp) (% r12) *)
 [0x49; 0x0f; 0x45; 0xf5];  (* CMOVNE (% rsi) (% r13) *)
 [0x49; 0x0f; 0x49; 0xc0];  (* CMOVNS (% rax) (% r8) *)
 [0x49; 0x0f; 0x49; 0xca];  (* CMOVNS (% rcx) (% r10) *)
 [0x49; 0x0f; 0x49; 0xd3];  (* CMOVNS (% rdx) (% r11) *)
 [0x49; 0x0f; 0x49; 0xd9];  (* CMOVNS (% rbx) (% r9) *)
 [0x49; 0x0f; 0xa5; 0xc2];  (* SHLD (% r10) (% rax) (% cl) *)
 [0x49; 0x0f; 0xa5; 0xfc];  (* SHLD (% r12) (% rdi) (% cl) *)
 [0x49; 0x0f; 0xad; 0xc2];  (* SHRD (% r10) (% rax) (% cl) *)
 [0x49; 0x0f; 0xaf; 0xc0];  (* IMUL (% rax) (% r8) *)
 [0x49; 0x0f; 0xaf; 0xc1];  (* IMUL (% rax) (% r9) *)
 [0x49; 0x0f; 0xaf; 0xc2];  (* IMUL (% rax) (% r10) *)
 [0x49; 0x0f; 0xaf; 0xc3];  (* IMUL (% rax) (% r11) *)
 [0x49; 0x0f; 0xaf; 0xc4];  (* IMUL (% rax) (% r12) *)
 [0x49; 0x0f; 0xaf; 0xca];  (* IMUL (% rcx) (% r10) *)
 [0x49; 0x0f; 0xaf; 0xd0];  (* IMUL (% rdx) (% r8) *)
 [0x49; 0x0f; 0xaf; 0xd1];  (* IMUL (% rdx) (% r9) *)
 [0x49; 0x0f; 0xaf; 0xd2];  (* IMUL (% rdx) (% r10) *)
 [0x49; 0x0f; 0xaf; 0xd3];  (* IMUL (% rdx) (% r11) *)
 [0x49; 0x0f; 0xaf; 0xd4];  (* IMUL (% rdx) (% r12) *)
 [0x49; 0x0f; 0xaf; 0xd6];  (* IMUL (% rdx) (% r14) *)
 [0x49; 0x0f; 0xaf; 0xd7];  (* IMUL (% rdx) (% r15) *)
 [0x49; 0x0f; 0xaf; 0xdc];  (* IMUL (% rbx) (% r12) *)
 [0x49; 0x0f; 0xaf; 0xdd];  (* IMUL (% rbx) (% r13) *)
 [0x49; 0x0f; 0xaf; 0xdf];  (* IMUL (% rbx) (% r15) *)
 [0x49; 0x0f; 0xaf; 0xeb];  (* IMUL (% rbp) (% r11) *)
 [0x49; 0x0f; 0xaf; 0xec];  (* IMUL (% rbp) (% r12) *)
 [0x49; 0x0f; 0xaf; 0xfc];  (* IMUL (% rdi) (% r12) *)
 [0x49; 0x0f; 0xbc; 0xc8];  (* BSF (% rcx) (% r8) *)
 [0x49; 0x0f; 0xbd; 0xc8];  (* BSR (% rcx) (% r8) *)
 [0x49; 0x11; 0xc0];        (* ADC (% r8) (% rax) *)
 [0x49; 0x11; 0xc1];        (* ADC (% r9) (% rax) *)
 [0x49; 0x11; 0xc2];        (* ADC (% r10) (% rax) *)
 [0x49; 0x11; 0xc3];        (* ADC (% r11) (% rax) *)
 [0x49; 0x11; 0xc4];        (* ADC (% r12) (% rax) *)
 [0x49; 0x11; 0xc5];        (* ADC (% r13) (% rax) *)
 [0x49; 0x11; 0xc6];        (* ADC (% r14) (% rax) *)
 [0x49; 0x11; 0xc7];        (* ADC (% r15) (% rax) *)
 [0x49; 0x11; 0xc8];        (* ADC (% r8) (% rcx) *)
 [0x49; 0x11; 0xc9];        (* ADC (% r9) (% rcx) *)
 [0x49; 0x11; 0xca];        (* ADC (% r10) (% rcx) *)
 [0x49; 0x11; 0xcb];        (* ADC (% r11) (% rcx) *)
 [0x49; 0x11; 0xcc];        (* ADC (% r12) (% rcx) *)
 [0x49; 0x11; 0xcd];        (* ADC (% r13) (% rcx) *)
 [0x49; 0x11; 0xce];        (* ADC (% r14) (% rcx) *)
 [0x49; 0x11; 0xcf];        (* ADC (% r15) (% rcx) *)
 [0x49; 0x11; 0xd0];        (* ADC (% r8) (% rdx) *)
 [0x49; 0x11; 0xd1];        (* ADC (% r9) (% rdx) *)
 [0x49; 0x11; 0xd2];        (* ADC (% r10) (% rdx) *)
 [0x49; 0x11; 0xd3];        (* ADC (% r11) (% rdx) *)
 [0x49; 0x11; 0xd4];        (* ADC (% r12) (% rdx) *)
 [0x49; 0x11; 0xd5];        (* ADC (% r13) (% rdx) *)
 [0x49; 0x11; 0xd6];        (* ADC (% r14) (% rdx) *)
 [0x49; 0x11; 0xd7];        (* ADC (% r15) (% rdx) *)
 [0x49; 0x11; 0xd8];        (* ADC (% r8) (% rbx) *)
 [0x49; 0x11; 0xd9];        (* ADC (% r9) (% rbx) *)
 [0x49; 0x11; 0xda];        (* ADC (% r10) (% rbx) *)
 [0x49; 0x11; 0xdb];        (* ADC (% r11) (% rbx) *)
 [0x49; 0x11; 0xdc];        (* ADC (% r12) (% rbx) *)
 [0x49; 0x11; 0xdd];        (* ADC (% r13) (% rbx) *)
 [0x49; 0x11; 0xde];        (* ADC (% r14) (% rbx) *)
 [0x49; 0x11; 0xdf];        (* ADC (% r15) (% rbx) *)
 [0x49; 0x11; 0xe8];        (* ADC (% r8) (% rbp) *)
 [0x49; 0x11; 0xe9];        (* ADC (% r9) (% rbp) *)
 [0x49; 0x11; 0xea];        (* ADC (% r10) (% rbp) *)
 [0x49; 0x11; 0xeb];        (* ADC (% r11) (% rbp) *)
 [0x49; 0x11; 0xec];        (* ADC (% r12) (% rbp) *)
 [0x49; 0x11; 0xed];        (* ADC (% r13) (% rbp) *)
 [0x49; 0x11; 0xee];        (* ADC (% r14) (% rbp) *)
 [0x49; 0x11; 0xef];        (* ADC (% r15) (% rbp) *)
 [0x49; 0x11; 0xf0];        (* ADC (% r8) (% rsi) *)
 [0x49; 0x11; 0xf2];        (* ADC (% r10) (% rsi) *)
 [0x49; 0x11; 0xf3];        (* ADC (% r11) (% rsi) *)
 [0x49; 0x11; 0xf5];        (* ADC (% r13) (% rsi) *)
 [0x49; 0x19; 0xc0];        (* SBB (% r8) (% rax) *)
 [0x49; 0x19; 0xc1];        (* SBB (% r9) (% rax) *)
 [0x49; 0x19; 0xc2];        (* SBB (% r10) (% rax) *)
 [0x49; 0x19; 0xc3];        (* SBB (% r11) (% rax) *)
 [0x49; 0x19; 0xc4];        (* SBB (% r12) (% rax) *)
 [0x49; 0x19; 0xc5];        (* SBB (% r13) (% rax) *)
 [0x49; 0x19; 0xc8];        (* SBB (% r8) (% rcx) *)
 [0x49; 0x19; 0xc9];        (* SBB (% r9) (% rcx) *)
 [0x49; 0x19; 0xca];        (* SBB (% r10) (% rcx) *)
 [0x49; 0x19; 0xcb];        (* SBB (% r11) (% rcx) *)
 [0x49; 0x19; 0xcc];        (* SBB (% r12) (% rcx) *)
 [0x49; 0x19; 0xcd];        (* SBB (% r13) (% rcx) *)
 [0x49; 0x19; 0xce];        (* SBB (% r14) (% rcx) *)
 [0x49; 0x19; 0xcf];        (* SBB (% r15) (% rcx) *)
 [0x49; 0x19; 0xd0];        (* SBB (% r8) (% rdx) *)
 [0x49; 0x19; 0xd1];        (* SBB (% r9) (% rdx) *)
 [0x49; 0x19; 0xd2];        (* SBB (% r10) (% rdx) *)
 [0x49; 0x19; 0xd3];        (* SBB (% r11) (% rdx) *)
 [0x49; 0x19; 0xd4];        (* SBB (% r12) (% rdx) *)
 [0x49; 0x19; 0xd5];        (* SBB (% r13) (% rdx) *)
 [0x49; 0x19; 0xd6];        (* SBB (% r14) (% rdx) *)
 [0x49; 0x19; 0xd7];        (* SBB (% r15) (% rdx) *)
 [0x49; 0x19; 0xd8];        (* SBB (% r8) (% rbx) *)
 [0x49; 0x19; 0xd9];        (* SBB (% r9) (% rbx) *)
 [0x49; 0x19; 0xda];        (* SBB (% r10) (% rbx) *)
 [0x49; 0x19; 0xdb];        (* SBB (% r11) (% rbx) *)
 [0x49; 0x19; 0xdc];        (* SBB (% r12) (% rbx) *)
 [0x49; 0x19; 0xdd];        (* SBB (% r13) (% rbx) *)
 [0x49; 0x19; 0xde];        (* SBB (% r14) (% rbx) *)
 [0x49; 0x19; 0xdf];        (* SBB (% r15) (% rbx) *)
 [0x49; 0x19; 0xe8];        (* SBB (% r8) (% rbp) *)
 [0x49; 0x19; 0xe9];        (* SBB (% r9) (% rbp) *)
 [0x49; 0x19; 0xea];        (* SBB (% r10) (% rbp) *)
 [0x49; 0x19; 0xeb];        (* SBB (% r11) (% rbp) *)
 [0x49; 0x19; 0xec];        (* SBB (% r12) (% rbp) *)
 [0x49; 0x19; 0xed];        (* SBB (% r13) (% rbp) *)
 [0x49; 0x19; 0xee];        (* SBB (% r14) (% rbp) *)
 [0x49; 0x19; 0xef];        (* SBB (% r15) (% rbp) *)
 [0x49; 0x19; 0xf0];        (* SBB (% r8) (% rsi) *)
 [0x49; 0x19; 0xf1];        (* SBB (% r9) (% rsi) *)
 [0x49; 0x19; 0xf2];        (* SBB (% r10) (% rsi) *)
 [0x49; 0x19; 0xf3];        (* SBB (% r11) (% rsi) *)
 [0x49; 0x19; 0xf4];        (* SBB (% r12) (% rsi) *)
 [0x49; 0x19; 0xf5];        (* SBB (% r13) (% rsi) *)
 [0x49; 0x21; 0xc1];        (* AND (% r9) (% rax) *)
 [0x49; 0x21; 0xc2];        (* AND (% r10) (% rax) *)
 [0x49; 0x21; 0xc3];        (* AND (% r11) (% rax) *)
 [0x49; 0x21; 0xc9];        (* AND (% r9) (% rcx) *)
 [0x49; 0x21; 0xca];        (* AND (% r10) (% rcx) *)
 [0x49; 0x21; 0xcb];        (* AND (% r11) (% rcx) *)
 [0x49; 0x21; 0xd0];        (* AND (% r8) (% rdx) *)
 [0x49; 0x21; 0xd1];        (* AND (% r9) (% rdx) *)
 [0x49; 0x21; 0xd2];        (* AND (% r10) (% rdx) *)
 [0x49; 0x21; 0xd3];        (* AND (% r11) (% rdx) *)
 [0x49; 0x21; 0xeb];        (* AND (% r11) (% rbp) *)
 [0x49; 0x21; 0xf2];        (* AND (% r10) (% rsi) *)
 [0x49; 0x21; 0xf3];        (* AND (% r11) (% rsi) *)
 [0x49; 0x29; 0xc0];        (* SUB (% r8) (% rax) *)
 [0x49; 0x29; 0xc1];        (* SUB (% r9) (% rax) *)
 [0x49; 0x29; 0xc2];        (* SUB (% r10) (% rax) *)
 [0x49; 0x29; 0xc3];        (* SUB (% r11) (% rax) *)
 [0x49; 0x29; 0xc4];        (* SUB (% r12) (% rax) *)
 [0x49; 0x29; 0xc5];        (* SUB (% r13) (% rax) *)
 [0x49; 0x29; 0xc6];        (* SUB (% r14) (% rax) *)
 [0x49; 0x29; 0xc8];        (* SUB (% r8) (% rcx) *)
 [0x49; 0x29; 0xc9];        (* SUB (% r9) (% rcx) *)
 [0x49; 0x29; 0xca];        (* SUB (% r10) (% rcx) *)
 [0x49; 0x29; 0xcb];        (* SUB (% r11) (% rcx) *)
 [0x49; 0x29; 0xd0];        (* SUB (% r8) (% rdx) *)
 [0x49; 0x29; 0xd1];        (* SUB (% r9) (% rdx) *)
 [0x49; 0x29; 0xd3];        (* SUB (% r11) (% rdx) *)
 [0x49; 0x29; 0xd5];        (* SUB (% r13) (% rdx) *)
 [0x49; 0x29; 0xd6];        (* SUB (% r14) (% rdx) *)
 [0x49; 0x29; 0xd8];        (* SUB (% r8) (% rbx) *)
 [0x49; 0x29; 0xdb];        (* SUB (% r11) (% rbx) *)
 [0x49; 0x29; 0xdc];        (* SUB (% r12) (% rbx) *)
 [0x49; 0x29; 0xdd];        (* SUB (% r13) (% rbx) *)
 [0x49; 0x29; 0xde];        (* SUB (% r14) (% rbx) *)
 [0x49; 0x29; 0xe8];        (* SUB (% r8) (% rbp) *)
 [0x49; 0x29; 0xe9];        (* SUB (% r9) (% rbp) *)
 [0x49; 0x29; 0xea];        (* SUB (% r10) (% rbp) *)
 [0x49; 0x29; 0xeb];        (* SUB (% r11) (% rbp) *)
 [0x49; 0x29; 0xec];        (* SUB (% r12) (% rbp) *)
 [0x49; 0x29; 0xed];        (* SUB (% r13) (% rbp) *)
 [0x49; 0x29; 0xf0];        (* SUB (% r8) (% rsi) *)
 [0x49; 0x29; 0xf1];        (* SUB (% r9) (% rsi) *)
 [0x49; 0x31; 0xc0];        (* XOR (% r8) (% rax) *)
 [0x49; 0x31; 0xc1];        (* XOR (% r9) (% rax) *)
 [0x49; 0x31; 0xc2];        (* XOR (% r10) (% rax) *)
 [0x49; 0x31; 0xc3];        (* XOR (% r11) (% rax) *)
 [0x49; 0x31; 0xc5];        (* XOR (% r13) (% rax) *)
 [0x49; 0x31; 0xc7];        (* XOR (% r15) (% rax) *)
 [0x49; 0x31; 0xd0];        (* XOR (% r8) (% rdx) *)
 [0x49; 0x31; 0xd2];        (* XOR (% r10) (% rdx) *)
 [0x49; 0x31; 0xe9];        (* XOR (% r9) (% rbp) *)
 [0x49; 0x31; 0xf0];        (* XOR (% r8) (% rsi) *)
 [0x49; 0x31; 0xf1];        (* XOR (% r9) (% rsi) *)
 [0x49; 0x31; 0xf2];        (* XOR (% r10) (% rsi) *)
 [0x49; 0x31; 0xf3];        (* XOR (% r11) (% rsi) *)
 [0x49; 0x39; 0xc1];        (* CMP (% r9) (% rax) *)
 [0x49; 0x39; 0xca];        (* CMP (% r10) (% rcx) *)
 [0x49; 0x39; 0xcb];        (* CMP (% r11) (% rcx) *)
 [0x49; 0x39; 0xd0];        (* CMP (% r8) (% rdx) *)
 [0x49; 0x39; 0xd1];        (* CMP (% r9) (% rdx) *)
 [0x49; 0x39; 0xd3];        (* CMP (% r11) (% rdx) *)
 [0x49; 0x39; 0xdb];        (* CMP (% r11) (% rbx) *)
 [0x49; 0x39; 0xde];        (* CMP (% r14) (% rbx) *)
 [0x49; 0x39; 0xea];        (* CMP (% r10) (% rbp) *)
 [0x49; 0x39; 0xf8];        (* CMP (% r8) (% rdi) *)
 [0x49; 0x39; 0xf9];        (* CMP (% r9) (% rdi) *)
 [0x49; 0x39; 0xfa];        (* CMP (% r10) (% rdi) *)
 [0x49; 0x39; 0xfb];        (* CMP (% r11) (% rdi) *)
 [0x49; 0x39; 0xfd];        (* CMP (% r13) (% rdi) *)
 [0x49; 0x39; 0xfe];        (* CMP (% r14) (% rdi) *)
 [0x49; 0x83; 0xc1; 0x01];  (* ADD (% r9) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xc2; 0x08];  (* ADD (% r10) (Imm8 (word 8)) *)
 [0x49; 0x83; 0xc3; 0x01];  (* ADD (% r11) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xc4; 0x08];  (* ADD (% r12) (Imm8 (word 8)) *)
 [0x49; 0x83; 0xc5; 0x3f];  (* ADD (% r13) (Imm8 (word 63)) *)
 [0x49; 0x83; 0xc6; 0x01];  (* ADD (% r14) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xd0; 0x00];  (* ADC (% r8) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd0; 0x01];  (* ADC (% r8) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xd1; 0x00];  (* ADC (% r9) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd2; 0x00];  (* ADC (% r10) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd3; 0x00];  (* ADC (% r11) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd4; 0x00];  (* ADC (% r12) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd5; 0x00];  (* ADC (% r13) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd6; 0x00];  (* ADC (% r14) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd7; 0x00];  (* ADC (% r15) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd8; 0x00];  (* SBB (% r8) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd8; 0xfe];  (* SBB (% r8) (Imm8 (word 254)) *)
 [0x49; 0x83; 0xd8; 0xff];  (* SBB (% r8) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xd9; 0x00];  (* SBB (% r9) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xd9; 0xff];  (* SBB (% r9) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xda; 0x00];  (* SBB (% r10) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xda; 0xff];  (* SBB (% r10) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xdb; 0x00];  (* SBB (% r11) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xdb; 0xff];  (* SBB (% r11) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xdc; 0x00];  (* SBB (% r12) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xdc; 0xff];  (* SBB (% r12) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xdd; 0x00];  (* SBB (% r13) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xdd; 0xff];  (* SBB (% r13) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xde; 0x00];  (* SBB (% r14) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xdf; 0x00];  (* SBB (% r15) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xe5; 0x01];  (* AND (% r13) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xe8; 0x01];  (* SUB (% r8) (Imm8 (word 1)) *)
 [0x49; 0x83; 0xe8; 0xff];  (* SUB (% r8) (Imm8 (word 255)) *)
 [0x49; 0x83; 0xeb; 0x08];  (* SUB (% r11) (Imm8 (word 8)) *)
 [0x49; 0x83; 0xf0; 0x02];  (* XOR (% r8) (Imm8 (word 2)) *)
 [0x49; 0x83; 0xf1; 0x02];  (* XOR (% r9) (Imm8 (word 2)) *)
 [0x49; 0x83; 0xf3; 0x02];  (* XOR (% r11) (Imm8 (word 2)) *)
 [0x49; 0x83; 0xf4; 0x02];  (* XOR (% r12) (Imm8 (word 2)) *)
 [0x49; 0x83; 0xf9; 0x00];  (* CMP (% r9) (Imm8 (word 0)) *)
 [0x49; 0x83; 0xfe; 0x01];  (* CMP (% r14) (Imm8 (word 1)) *)
 [0x49; 0x89; 0xc0];        (* MOV (% r8) (% rax) *)
 [0x49; 0x89; 0xc1];        (* MOV (% r9) (% rax) *)
 [0x49; 0x89; 0xc2];        (* MOV (% r10) (% rax) *)
 [0x49; 0x89; 0xc3];        (* MOV (% r11) (% rax) *)
 [0x49; 0x89; 0xc4];        (* MOV (% r12) (% rax) *)
 [0x49; 0x89; 0xc5];        (* MOV (% r13) (% rax) *)
 [0x49; 0x89; 0xc6];        (* MOV (% r14) (% rax) *)
 [0x49; 0x89; 0xc7];        (* MOV (% r15) (% rax) *)
 [0x49; 0x89; 0xc8];        (* MOV (% r8) (% rcx) *)
 [0x49; 0x89; 0xc9];        (* MOV (% r9) (% rcx) *)
 [0x49; 0x89; 0xca];        (* MOV (% r10) (% rcx) *)
 [0x49; 0x89; 0xcb];        (* MOV (% r11) (% rcx) *)
 [0x49; 0x89; 0xcc];        (* MOV (% r12) (% rcx) *)
 [0x49; 0x89; 0xcd];        (* MOV (% r13) (% rcx) *)
 [0x49; 0x89; 0xd0];        (* MOV (% r8) (% rdx) *)
 [0x49; 0x89; 0xd1];        (* MOV (% r9) (% rdx) *)
 [0x49; 0x89; 0xd2];        (* MOV (% r10) (% rdx) *)
 [0x49; 0x89; 0xd3];        (* MOV (% r11) (% rdx) *)
 [0x49; 0x89; 0xd4];        (* MOV (% r12) (% rdx) *)
 [0x49; 0x89; 0xd5];        (* MOV (% r13) (% rdx) *)
 [0x49; 0x89; 0xd6];        (* MOV (% r14) (% rdx) *)
 [0x49; 0x89; 0xd7];        (* MOV (% r15) (% rdx) *)
 [0x49; 0x89; 0xd8];        (* MOV (% r8) (% rbx) *)
 [0x49; 0x89; 0xd9];        (* MOV (% r9) (% rbx) *)
 [0x49; 0x89; 0xda];        (* MOV (% r10) (% rbx) *)
 [0x49; 0x89; 0xdb];        (* MOV (% r11) (% rbx) *)
 [0x49; 0x89; 0xdc];        (* MOV (% r12) (% rbx) *)
 [0x49; 0x89; 0xdd];        (* MOV (% r13) (% rbx) *)
 [0x49; 0x89; 0xde];        (* MOV (% r14) (% rbx) *)
 [0x49; 0x89; 0xe9];        (* MOV (% r9) (% rbp) *)
 [0x49; 0x89; 0xeb];        (* MOV (% r11) (% rbp) *)
 [0x49; 0x89; 0xf0];        (* MOV (% r8) (% rsi) *)
 [0x49; 0x89; 0xf3];        (* MOV (% r11) (% rsi) *)
 [0x49; 0x89; 0xf8];        (* MOV (% r8) (% rdi) *)
 [0x49; 0x89; 0xf9];        (* MOV (% r9) (% rdi) *)
 [0x49; 0x89; 0xfa];        (* MOV (% r10) (% rdi) *)
 [0x49; 0x89; 0xfb];        (* MOV (% r11) (% rdi) *)
 [0x49; 0x89; 0xfc];        (* MOV (% r12) (% rdi) *)
 [0x49; 0x89; 0xfd];        (* MOV (% r13) (% rdi) *)
 [0x49; 0x8d; 0x04; 0xf9];  (* LEA (% rax) (%%% (r9,3,rdi)) *)
 [0x49; 0x8d; 0x5a; 0x01];  (* LEA (% rbx) (%% (r10,1)) *)
 [0x49; 0xc1; 0xe0; 0x15];  (* SHL (% r8) (Imm8 (word 21)) *)
 [0x49; 0xc1; 0xe0; 0x16];  (* SHL (% r8) (Imm8 (word 22)) *)
 [0x49; 0xc1; 0xe1; 0x10];  (* SHL (% r9) (Imm8 (word 16)) *)
 [0x49; 0xc1; 0xe1; 0x1e];  (* SHL (% r9) (Imm8 (word 30)) *)
 [0x49; 0xc1; 0xe1; 0x1f];  (* SHL (% r9) (Imm8 (word 31)) *)
 [0x49; 0xc1; 0xe2; 0x04];  (* SHL (% r10) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe2; 0x16];  (* SHL (% r10) (Imm8 (word 22)) *)
 [0x49; 0xc1; 0xe3; 0x04];  (* SHL (% r11) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe3; 0x10];  (* SHL (% r11) (Imm8 (word 16)) *)
 [0x49; 0xc1; 0xe3; 0x1e];  (* SHL (% r11) (Imm8 (word 30)) *)
 [0x49; 0xc1; 0xe3; 0x1f];  (* SHL (% r11) (Imm8 (word 31)) *)
 [0x49; 0xc1; 0xe4; 0x04];  (* SHL (% r12) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe4; 0x15];  (* SHL (% r12) (Imm8 (word 21)) *)
 [0x49; 0xc1; 0xe5; 0x04];  (* SHL (% r13) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe6; 0x02];  (* SHL (% r14) (Imm8 (word 2)) *)
 [0x49; 0xc1; 0xe6; 0x04];  (* SHL (% r14) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe7; 0x04];  (* SHL (% r15) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xe8; 0x08];  (* SHR (% r8) (Imm8 (word 8)) *)
 [0x49; 0xc1; 0xe9; 0x1e];  (* SHR (% r9) (Imm8 (word 30)) *)
 [0x49; 0xc1; 0xe9; 0x20];  (* SHR (% r9) (Imm8 (word 32)) *)
 [0x49; 0xc1; 0xea; 0x10];  (* SHR (% r10) (Imm8 (word 16)) *)
 [0x49; 0xc1; 0xeb; 0x04];  (* SHR (% r11) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xeb; 0x1e];  (* SHR (% r11) (Imm8 (word 30)) *)
 [0x49; 0xc1; 0xeb; 0x20];  (* SHR (% r11) (Imm8 (word 32)) *)
 [0x49; 0xc1; 0xeb; 0x3c];  (* SHR (% r11) (Imm8 (word 60)) *)
 [0x49; 0xc1; 0xec; 0x20];  (* SHR (% r12) (Imm8 (word 32)) *)
 [0x49; 0xc1; 0xec; 0x3c];  (* SHR (% r12) (Imm8 (word 60)) *)
 [0x49; 0xc1; 0xed; 0x06];  (* SHR (% r13) (Imm8 (word 6)) *)
 [0x49; 0xc1; 0xed; 0x3c];  (* SHR (% r13) (Imm8 (word 60)) *)
 [0x49; 0xc1; 0xee; 0x3c];  (* SHR (% r14) (Imm8 (word 60)) *)
 [0x49; 0xc1; 0xef; 0x04];  (* SHR (% r15) (Imm8 (word 4)) *)
 [0x49; 0xc1; 0xef; 0x10];  (* SHR (% r15) (Imm8 (word 16)) *)
 [0x49; 0xc1; 0xef; 0x3c];  (* SHR (% r15) (Imm8 (word 60)) *)
 [0x49; 0xc1; 0xf8; 0x2b];  (* SAR (% r8) (Imm8 (word 43)) *)
 [0x49; 0xc1; 0xf9; 0x3f];  (* SAR (% r9) (Imm8 (word 63)) *)
 [0x49; 0xc1; 0xfa; 0x2b];  (* SAR (% r10) (Imm8 (word 43)) *)
 [0x49; 0xc1; 0xfa; 0x3f];  (* SAR (% r10) (Imm8 (word 63)) *)
 [0x49; 0xc1; 0xfb; 0x2a];  (* SAR (% r11) (Imm8 (word 42)) *)
 [0x49; 0xc1; 0xfb; 0x3f];  (* SAR (% r11) (Imm8 (word 63)) *)
 [0x49; 0xc1; 0xfc; 0x14];  (* SAR (% r12) (Imm8 (word 20)) *)
 [0x49; 0xc1; 0xfc; 0x2b];  (* SAR (% r12) (Imm8 (word 43)) *)
 [0x49; 0xc1; 0xfd; 0x14];  (* SAR (% r13) (Imm8 (word 20)) *)
 [0x49; 0xc1; 0xfd; 0x3f];  (* SAR (% r13) (Imm8 (word 63)) *)
 [0x49; 0xc1; 0xfe; 0x2b];  (* SAR (% r14) (Imm8 (word 43)) *)
 [0x49; 0xc1; 0xff; 0x2a];  (* SAR (% r15) (Imm8 (word 42)) *)
 [0x49; 0xc1; 0xff; 0x3f];  (* SAR (% r15) (Imm8 (word 63)) *)
 [0x49; 0xd1; 0xe1];        (* SHL (% r9) (Imm8 (word 1)) *)
 [0x49; 0xd1; 0xe3];        (* SHL (% r11) (Imm8 (word 1)) *)
 [0x49; 0xd1; 0xec];        (* SHR (% r12) (Imm8 (word 1)) *)
 [0x49; 0xd1; 0xee];        (* SHR (% r14) (Imm8 (word 1)) *)
 [0x49; 0xd3; 0xe0];        (* SHL (% r8) (% cl) *)
 [0x49; 0xd3; 0xe2];        (* SHL (% r10) (% cl) *)
 [0x49; 0xd3; 0xe8];        (* SHR (% r8) (% cl) *)
 [0x49; 0xd3; 0xec];        (* SHR (% r12) (% cl) *)
 [0x49; 0xf7; 0xd0];        (* NOT (% r8) *)
 [0x49; 0xf7; 0xd2];        (* NOT (% r10) *)
 [0x49; 0xf7; 0xd3];        (* NOT (% r11) *)
 [0x49; 0xf7; 0xd4];        (* NOT (% r12) *)
 [0x49; 0xf7; 0xd6];        (* NOT (% r14) *)
 [0x49; 0xf7; 0xd8];        (* NEG (% r8) *)
 [0x49; 0xf7; 0xd9];        (* NEG (% r9) *)
 [0x49; 0xf7; 0xda];        (* NEG (% r10) *)
 [0x49; 0xf7; 0xdb];        (* NEG (% r11) *)
 [0x49; 0xf7; 0xdc];        (* NEG (% r12) *)
 [0x49; 0xf7; 0xdd];        (* NEG (% r13) *)
 [0x49; 0xf7; 0xdf];        (* NEG (% r15) *)
 [0x49; 0xf7; 0xe0];        (* MUL2 (% rdx,% rax) (% r8) *)
 [0x49; 0xf7; 0xe1];        (* MUL2 (% rdx,% rax) (% r9) *)
 [0x49; 0xf7; 0xe2];        (* MUL2 (% rdx,% rax) (% r10) *)
 [0x49; 0xf7; 0xe3];        (* MUL2 (% rdx,% rax) (% r11) *)
 [0x49; 0xf7; 0xe4];        (* MUL2 (% rdx,% rax) (% r12) *)
 [0x49; 0xf7; 0xe5];        (* MUL2 (% rdx,% rax) (% r13) *)
 [0x49; 0xf7; 0xe6];        (* MUL2 (% rdx,% rax) (% r14) *)
 [0x49; 0xf7; 0xe7];        (* MUL2 (% rdx,% rax) (% r15) *)
 [0x49; 0xff; 0xc0];        (* INC (% r8) *)
 [0x49; 0xff; 0xc1];        (* INC (% r9) *)
 [0x49; 0xff; 0xc2];        (* INC (% r10) *)
 [0x49; 0xff; 0xc3];        (* INC (% r11) *)
 [0x49; 0xff; 0xc5];        (* INC (% r13) *)
 [0x49; 0xff; 0xc6];        (* INC (% r14) *)
 [0x49; 0xff; 0xc7];        (* INC (% r15) *)
 [0x49; 0xff; 0xc8];        (* DEC (% r8) *)
 [0x49; 0xff; 0xc9];        (* DEC (% r9) *)
 [0x49; 0xff; 0xca];        (* DEC (% r10) *)
 [0x49; 0xff; 0xcb];        (* DEC (% r11) *)
 [0x49; 0xff; 0xcc];        (* DEC (% r12) *)
 [0x49; 0xff; 0xcd];        (* DEC (% r13) *)
 [0x4a; 0x8d; 0x04; 0x41];  (* LEA (% rax) (%%% (rcx,1,r8)) *)
 [0x4c; 0x01; 0xc0];        (* ADD (% rax) (% r8) *)
 [0x4c; 0x01; 0xc1];        (* ADD (% rcx) (% r8) *)
 [0x4c; 0x01; 0xc2];        (* ADD (% rdx) (% r8) *)
 [0x4c; 0x01; 0xc3];        (* ADD (% rbx) (% r8) *)
 [0x4c; 0x01; 0xc8];        (* ADD (% rax) (% r9) *)
 [0x4c; 0x01; 0xc9];        (* ADD (% rcx) (% r9) *)
 [0x4c; 0x01; 0xca];        (* ADD (% rdx) (% r9) *)
 [0x4c; 0x01; 0xcb];        (* ADD (% rbx) (% r9) *)
 [0x4c; 0x01; 0xd0];        (* ADD (% rax) (% r10) *)
 [0x4c; 0x01; 0xd1];        (* ADD (% rcx) (% r10) *)
 [0x4c; 0x01; 0xd2];        (* ADD (% rdx) (% r10) *)
 [0x4c; 0x01; 0xd3];        (* ADD (% rbx) (% r10) *)
 [0x4c; 0x01; 0xd8];        (* ADD (% rax) (% r11) *)
 [0x4c; 0x01; 0xd9];        (* ADD (% rcx) (% r11) *)
 [0x4c; 0x01; 0xda];        (* ADD (% rdx) (% r11) *)
 [0x4c; 0x01; 0xdb];        (* ADD (% rbx) (% r11) *)
 [0x4c; 0x01; 0xde];        (* ADD (% rsi) (% r11) *)
 [0x4c; 0x01; 0xe0];        (* ADD (% rax) (% r12) *)
 [0x4c; 0x01; 0xe1];        (* ADD (% rcx) (% r12) *)
 [0x4c; 0x01; 0xe2];        (* ADD (% rdx) (% r12) *)
 [0x4c; 0x01; 0xe3];        (* ADD (% rbx) (% r12) *)
 [0x4c; 0x01; 0xe8];        (* ADD (% rax) (% r13) *)
 [0x4c; 0x01; 0xe9];        (* ADD (% rcx) (% r13) *)
 [0x4c; 0x01; 0xea];        (* ADD (% rdx) (% r13) *)
 [0x4c; 0x01; 0xeb];        (* ADD (% rbx) (% r13) *)
 [0x4c; 0x01; 0xed];        (* ADD (% rbp) (% r13) *)
 [0x4c; 0x01; 0xf0];        (* ADD (% rax) (% r14) *)
 [0x4c; 0x01; 0xf2];        (* ADD (% rdx) (% r14) *)
 [0x4c; 0x01; 0xf3];        (* ADD (% rbx) (% r14) *)
 [0x4c; 0x01; 0xfa];        (* ADD (% rdx) (% r15) *)
 [0x4c; 0x09; 0xc0];        (* OR (% rax) (% r8) *)
 [0x4c; 0x09; 0xc2];        (* OR (% rdx) (% r8) *)
 [0x4c; 0x09; 0xc8];        (* OR (% rax) (% r9) *)
 [0x4c; 0x09; 0xca];        (* OR (% rdx) (% r9) *)
 [0x4c; 0x09; 0xd0];        (* OR (% rax) (% r10) *)
 [0x4c; 0x09; 0xd8];        (* OR (% rax) (% r11) *)
 [0x4c; 0x09; 0xf2];        (* OR (% rdx) (% r14) *)
 [0x4c; 0x09; 0xf3];        (* OR (% rbx) (% r14) *)
 [0x4c; 0x09; 0xf5];        (* OR (% rbp) (% r14) *)
 [0x4c; 0x0f; 0x42; 0xc0];  (* CMOVB (% r8) (% rax) *)
 [0x4c; 0x0f; 0x42; 0xc1];  (* CMOVB (% r8) (% rcx) *)
 [0x4c; 0x0f; 0x42; 0xc7];  (* CMOVB (% r8) (% rdi) *)
 [0x4c; 0x0f; 0x42; 0xc8];  (* CMOVB (% r9) (% rax) *)
 [0x4c; 0x0f; 0x42; 0xc9];  (* CMOVB (% r9) (% rcx) *)
 [0x4c; 0x0f; 0x42; 0xca];  (* CMOVB (% r9) (% rdx) *)
 [0x4c; 0x0f; 0x42; 0xd1];  (* CMOVB (% r10) (% rcx) *)
 [0x4c; 0x0f; 0x42; 0xd6];  (* CMOVB (% r10) (% rsi) *)
 [0x4c; 0x0f; 0x42; 0xda];  (* CMOVB (% r11) (% rdx) *)
 [0x4c; 0x0f; 0x42; 0xe1];  (* CMOVB (% r12) (% rcx) *)
 [0x4c; 0x0f; 0x42; 0xe2];  (* CMOVB (% r12) (% rdx) *)
 [0x4c; 0x0f; 0x42; 0xe3];  (* CMOVB (% r12) (% rbx) *)
 [0x4c; 0x0f; 0x42; 0xe9];  (* CMOVB (% r13) (% rcx) *)
 [0x4c; 0x0f; 0x42; 0xea];  (* CMOVB (% r13) (% rdx) *)
 [0x4c; 0x0f; 0x42; 0xeb];  (* CMOVB (% r13) (% rbx) *)
 [0x4c; 0x0f; 0x42; 0xf3];  (* CMOVB (% r14) (% rbx) *)
 [0x4c; 0x0f; 0x42; 0xf5];  (* CMOVB (% r14) (% rbp) *)
 [0x4c; 0x0f; 0x42; 0xfa];  (* CMOVB (% r15) (% rdx) *)
 [0x4c; 0x0f; 0x43; 0xe7];  (* CMOVAE (% r12) (% rdi) *)
 [0x4c; 0x0f; 0x43; 0xef];  (* CMOVAE (% r13) (% rdi) *)
 [0x4c; 0x0f; 0x44; 0xc0];  (* CMOVE (% r8) (% rax) *)
 [0x4c; 0x0f; 0x44; 0xc2];  (* CMOVE (% r8) (% rdx) *)
 [0x4c; 0x0f; 0x44; 0xc5];  (* CMOVE (% r8) (% rbp) *)
 [0x4c; 0x0f; 0x44; 0xc8];  (* CMOVE (% r9) (% rax) *)
 [0x4c; 0x0f; 0x44; 0xd0];  (* CMOVE (% r10) (% rax) *)
 [0x4c; 0x0f; 0x44; 0xd8];  (* CMOVE (% r11) (% rax) *)
 [0x4c; 0x0f; 0x45; 0xc1];  (* CMOVNE (% r8) (% rcx) *)
 [0x4c; 0x0f; 0x45; 0xca];  (* CMOVNE (% r9) (% rdx) *)
 [0x4c; 0x0f; 0x45; 0xd5];  (* CMOVNE (% r10) (% rbp) *)
 [0x4c; 0x0f; 0x45; 0xf0];  (* CMOVNE (% r14) (% rax) *)
 [0x4c; 0x0f; 0x45; 0xfb];  (* CMOVNE (% r15) (% rbx) *)
 [0x4c; 0x0f; 0x48; 0xc5];  (* CMOVS (% r8) (% rbp) *)
 [0x4c; 0x0f; 0xa5; 0xc8];  (* SHLD (% rax) (% r9) (% cl) *)
 [0x4c; 0x0f; 0xa5; 0xca];  (* SHLD (% rdx) (% r9) (% cl) *)
 [0x4c; 0x0f; 0xaf; 0xc0];  (* IMUL (% r8) (% rax) *)
 [0x4c; 0x0f; 0xaf; 0xc5];  (* IMUL (% r8) (% rbp) *)
 [0x4c; 0x0f; 0xaf; 0xc6];  (* IMUL (% r8) (% rsi) *)
 [0x4c; 0x0f; 0xaf; 0xc8];  (* IMUL (% r9) (% rax) *)
 [0x4c; 0x0f; 0xaf; 0xc9];  (* IMUL (% r9) (% rcx) *)
 [0x4c; 0x0f; 0xaf; 0xcd];  (* IMUL (% r9) (% rbp) *)
 [0x4c; 0x0f; 0xaf; 0xce];  (* IMUL (% r9) (% rsi) *)
 [0x4c; 0x0f; 0xaf; 0xd5];  (* IMUL (% r10) (% rbp) *)
 [0x4c; 0x0f; 0xaf; 0xd6];  (* IMUL (% r10) (% rsi) *)
 [0x4c; 0x0f; 0xaf; 0xd8];  (* IMUL (% r11) (% rax) *)
 [0x4c; 0x0f; 0xaf; 0xda];  (* IMUL (% r11) (% rdx) *)
 [0x4c; 0x0f; 0xaf; 0xdd];  (* IMUL (% r11) (% rbp) *)
 [0x4c; 0x0f; 0xaf; 0xde];  (* IMUL (% r11) (% rsi) *)
 [0x4c; 0x0f; 0xaf; 0xe0];  (* IMUL (% r12) (% rax) *)
 [0x4c; 0x0f; 0xaf; 0xe2];  (* IMUL (% r12) (% rdx) *)
 [0x4c; 0x0f; 0xaf; 0xe3];  (* IMUL (% r12) (% rbx) *)
 [0x4c; 0x0f; 0xaf; 0xe9];  (* IMUL (% r13) (% rcx) *)
 [0x4c; 0x0f; 0xaf; 0xf0];  (* IMUL (% r14) (% rax) *)
 [0x4c; 0x11; 0xc0];        (* ADC (% rax) (% r8) *)
 [0x4c; 0x11; 0xc1];        (* ADC (% rcx) (% r8) *)
 [0x4c; 0x11; 0xc8];        (* ADC (% rax) (% r9) *)
 [0x4c; 0x11; 0xc9];        (* ADC (% rcx) (% r9) *)
 [0x4c; 0x11; 0xca];        (* ADC (% rdx) (% r9) *)
 [0x4c; 0x11; 0xcb];        (* ADC (% rbx) (% r9) *)
 [0x4c; 0x11; 0xd0];        (* ADC (% rax) (% r10) *)
 [0x4c; 0x11; 0xd1];        (* ADC (% rcx) (% r10) *)
 [0x4c; 0x11; 0xd5];        (* ADC (% rbp) (% r10) *)
 [0x4c; 0x11; 0xd6];        (* ADC (% rsi) (% r10) *)
 [0x4c; 0x11; 0xd8];        (* ADC (% rax) (% r11) *)
 [0x4c; 0x11; 0xd9];        (* ADC (% rcx) (% r11) *)
 [0x4c; 0x11; 0xda];        (* ADC (% rdx) (% r11) *)
 [0x4c; 0x11; 0xdb];        (* ADC (% rbx) (% r11) *)
 [0x4c; 0x11; 0xe0];        (* ADC (% rax) (% r12) *)
 [0x4c; 0x11; 0xe5];        (* ADC (% rbp) (% r12) *)
 [0x4c; 0x11; 0xe8];        (* ADC (% rax) (% r13) *)
 [0x4c; 0x11; 0xe9];        (* ADC (% rcx) (% r13) *)
 [0x4c; 0x11; 0xea];        (* ADC (% rdx) (% r13) *)
 [0x4c; 0x11; 0xeb];        (* ADC (% rbx) (% r13) *)
 [0x4c; 0x11; 0xee];        (* ADC (% rsi) (% r13) *)
 [0x4c; 0x11; 0xf2];        (* ADC (% rdx) (% r14) *)
 [0x4c; 0x11; 0xf3];        (* ADC (% rbx) (% r14) *)
 [0x4c; 0x11; 0xf5];        (* ADC (% rbp) (% r14) *)
 [0x4c; 0x11; 0xfb];        (* ADC (% rbx) (% r15) *)
 [0x4c; 0x19; 0xc0];        (* SBB (% rax) (% r8) *)
 [0x4c; 0x19; 0xc2];        (* SBB (% rdx) (% r8) *)
 [0x4c; 0x19; 0xc8];        (* SBB (% rax) (% r9) *)
 [0x4c; 0x19; 0xca];        (* SBB (% rdx) (% r9) *)
 [0x4c; 0x19; 0xd1];        (* SBB (% rcx) (% r10) *)
 [0x4c; 0x19; 0xd6];        (* SBB (% rsi) (% r10) *)
 [0x4c; 0x19; 0xe8];        (* SBB (% rax) (% r13) *)
 [0x4c; 0x19; 0xf0];        (* SBB (% rax) (% r14) *)
 [0x4c; 0x19; 0xf8];        (* SBB (% rax) (% r15) *)
 [0x4c; 0x21; 0xc0];        (* AND (% rax) (% r8) *)
 [0x4c; 0x21; 0xc1];        (* AND (% rcx) (% r8) *)
 [0x4c; 0x21; 0xc2];        (* AND (% rdx) (% r8) *)
 [0x4c; 0x21; 0xc3];        (* AND (% rbx) (% r8) *)
 [0x4c; 0x21; 0xc5];        (* AND (% rbp) (% r8) *)
 [0x4c; 0x21; 0xc8];        (* AND (% rax) (% r9) *)
 [0x4c; 0x21; 0xc9];        (* AND (% rcx) (% r9) *)
 [0x4c; 0x21; 0xca];        (* AND (% rdx) (% r9) *)
 [0x4c; 0x21; 0xce];        (* AND (% rsi) (% r9) *)
 [0x4c; 0x21; 0xd0];        (* AND (% rax) (% r10) *)
 [0x4c; 0x21; 0xd1];        (* AND (% rcx) (% r10) *)
 [0x4c; 0x21; 0xd2];        (* AND (% rdx) (% r10) *)
 [0x4c; 0x21; 0xd3];        (* AND (% rbx) (% r10) *)
 [0x4c; 0x21; 0xd6];        (* AND (% rsi) (% r10) *)
 [0x4c; 0x21; 0xd8];        (* AND (% rax) (% r11) *)
 [0x4c; 0x21; 0xd9];        (* AND (% rcx) (% r11) *)
 [0x4c; 0x21; 0xda];        (* AND (% rdx) (% r11) *)
 [0x4c; 0x21; 0xdb];        (* AND (% rbx) (% r11) *)
 [0x4c; 0x21; 0xde];        (* AND (% rsi) (% r11) *)
 [0x4c; 0x21; 0xdf];        (* AND (% rdi) (% r11) *)
 [0x4c; 0x21; 0xe0];        (* AND (% rax) (% r12) *)
 [0x4c; 0x21; 0xe1];        (* AND (% rcx) (% r12) *)
 [0x4c; 0x21; 0xe2];        (* AND (% rdx) (% r12) *)
 [0x4c; 0x21; 0xe3];        (* AND (% rbx) (% r12) *)
 [0x4c; 0x21; 0xe6];        (* AND (% rsi) (% r12) *)
 [0x4c; 0x21; 0xe8];        (* AND (% rax) (% r13) *)
 [0x4c; 0x21; 0xea];        (* AND (% rdx) (% r13) *)
 [0x4c; 0x21; 0xeb];        (* AND (% rbx) (% r13) *)
 [0x4c; 0x21; 0xf0];        (* AND (% rax) (% r14) *)
 [0x4c; 0x21; 0xf2];        (* AND (% rdx) (% r14) *)
 [0x4c; 0x21; 0xf3];        (* AND (% rbx) (% r14) *)
 [0x4c; 0x21; 0xf8];        (* AND (% rax) (% r15) *)
 [0x4c; 0x21; 0xfe];        (* AND (% rsi) (% r15) *)
 [0x4c; 0x29; 0xc0];        (* SUB (% rax) (% r8) *)
 [0x4c; 0x29; 0xc2];        (* SUB (% rdx) (% r8) *)
 [0x4c; 0x29; 0xc3];        (* SUB (% rbx) (% r8) *)
 [0x4c; 0x29; 0xc7];        (* SUB (% rdi) (% r8) *)
 [0x4c; 0x29; 0xc8];        (* SUB (% rax) (% r9) *)
 [0x4c; 0x29; 0xca];        (* SUB (% rdx) (% r9) *)
 [0x4c; 0x29; 0xd0];        (* SUB (% rax) (% r10) *)
 [0x4c; 0x29; 0xd2];        (* SUB (% rdx) (% r10) *)
 [0x4c; 0x29; 0xd7];        (* SUB (% rdi) (% r10) *)
 [0x4c; 0x29; 0xd8];        (* SUB (% rax) (% r11) *)
 [0x4c; 0x29; 0xda];        (* SUB (% rdx) (% r11) *)
 [0x4c; 0x29; 0xdb];        (* SUB (% rbx) (% r11) *)
 [0x4c; 0x29; 0xde];        (* SUB (% rsi) (% r11) *)
 [0x4c; 0x29; 0xe0];        (* SUB (% rax) (% r12) *)
 [0x4c; 0x29; 0xe2];        (* SUB (% rdx) (% r12) *)
 [0x4c; 0x29; 0xe3];        (* SUB (% rbx) (% r12) *)
 [0x4c; 0x29; 0xeb];        (* SUB (% rbx) (% r13) *)
 [0x4c; 0x29; 0xf2];        (* SUB (% rdx) (% r14) *)
 [0x4c; 0x29; 0xf3];        (* SUB (% rbx) (% r14) *)
 [0x4c; 0x29; 0xf5];        (* SUB (% rbp) (% r14) *)
 [0x4c; 0x29; 0xfa];        (* SUB (% rdx) (% r15) *)
 [0x4c; 0x29; 0xfb];        (* SUB (% rbx) (% r15) *)
 [0x4c; 0x29; 0xfd];        (* SUB (% rbp) (% r15) *)
 [0x4c; 0x31; 0xc6];        (* XOR (% rsi) (% r8) *)
 [0x4c; 0x31; 0xc7];        (* XOR (% rdi) (% r8) *)
 [0x4c; 0x31; 0xc8];        (* XOR (% rax) (% r9) *)
 [0x4c; 0x31; 0xca];        (* XOR (% rdx) (% r9) *)
 [0x4c; 0x31; 0xd0];        (* XOR (% rax) (% r10) *)
 [0x4c; 0x31; 0xd8];        (* XOR (% rax) (% r11) *)
 [0x4c; 0x31; 0xe0];        (* XOR (% rax) (% r12) *)
 [0x4c; 0x31; 0xe3];        (* XOR (% rbx) (% r12) *)
 [0x4c; 0x31; 0xe7];        (* XOR (% rdi) (% r12) *)
 [0x4c; 0x31; 0xe8];        (* XOR (% rax) (% r13) *)
 [0x4c; 0x31; 0xf8];        (* XOR (% rax) (% r15) *)
 [0x4c; 0x39; 0xc2];        (* CMP (% rdx) (% r8) *)
 [0x4c; 0x39; 0xc3];        (* CMP (% rbx) (% r8) *)
 [0x4c; 0x39; 0xc7];        (* CMP (% rdi) (% r8) *)
 [0x4c; 0x39; 0xcb];        (* CMP (% rbx) (% r9) *)
 [0x4c; 0x39; 0xd3];        (* CMP (% rbx) (% r10) *)
 [0x4c; 0x39; 0xe3];        (* CMP (% rbx) (% r12) *)
 [0x4c; 0x89; 0xc0];        (* MOV (% rax) (% r8) *)
 [0x4c; 0x89; 0xc1];        (* MOV (% rcx) (% r8) *)
 [0x4c; 0x89; 0xc2];        (* MOV (% rdx) (% r8) *)
 [0x4c; 0x89; 0xc3];        (* MOV (% rbx) (% r8) *)
 [0x4c; 0x89; 0xc5];        (* MOV (% rbp) (% r8) *)
 [0x4c; 0x89; 0xc6];        (* MOV (% rsi) (% r8) *)
 [0x4c; 0x89; 0xc8];        (* MOV (% rax) (% r9) *)
 [0x4c; 0x89; 0xc9];        (* MOV (% rcx) (% r9) *)
 [0x4c; 0x89; 0xca];        (* MOV (% rdx) (% r9) *)
 [0x4c; 0x89; 0xcb];        (* MOV (% rbx) (% r9) *)
 [0x4c; 0x89; 0xd0];        (* MOV (% rax) (% r10) *)
 [0x4c; 0x89; 0xd1];        (* MOV (% rcx) (% r10) *)
 [0x4c; 0x89; 0xd2];        (* MOV (% rdx) (% r10) *)
 [0x4c; 0x89; 0xd3];        (* MOV (% rbx) (% r10) *)
 [0x4c; 0x89; 0xd7];        (* MOV (% rdi) (% r10) *)
 [0x4c; 0x89; 0xd8];        (* MOV (% rax) (% r11) *)
 [0x4c; 0x89; 0xd9];        (* MOV (% rcx) (% r11) *)
 [0x4c; 0x89; 0xda];        (* MOV (% rdx) (% r11) *)
 [0x4c; 0x89; 0xdb];        (* MOV (% rbx) (% r11) *)
 [0x4c; 0x89; 0xde];        (* MOV (% rsi) (% r11) *)
 [0x4c; 0x89; 0xe0];        (* MOV (% rax) (% r12) *)
 [0x4c; 0x89; 0xe1];        (* MOV (% rcx) (% r12) *)
 [0x4c; 0x89; 0xe2];        (* MOV (% rdx) (% r12) *)
 [0x4c; 0x89; 0xe3];        (* MOV (% rbx) (% r12) *)
 [0x4c; 0x89; 0xe5];        (* MOV (% rbp) (% r12) *)
 [0x4c; 0x89; 0xe7];        (* MOV (% rdi) (% r12) *)
 [0x4c; 0x89; 0xe8];        (* MOV (% rax) (% r13) *)
 [0x4c; 0x89; 0xe9];        (* MOV (% rcx) (% r13) *)
 [0x4c; 0x89; 0xea];        (* MOV (% rdx) (% r13) *)
 [0x4c; 0x89; 0xeb];        (* MOV (% rbx) (% r13) *)
 [0x4c; 0x89; 0xf0];        (* MOV (% rax) (% r14) *)
 [0x4c; 0x89; 0xf3];        (* MOV (% rbx) (% r14) *)
 [0x4c; 0x89; 0xf5];        (* MOV (% rbp) (% r14) *)
 [0x4c; 0x89; 0xf6];        (* MOV (% rsi) (% r14) *)
 [0x4c; 0x89; 0xf8];        (* MOV (% rax) (% r15) *)
 [0x4c; 0x89; 0xfa];        (* MOV (% rdx) (% r15) *)
 [0x4c; 0x89; 0xfb];        (* MOV (% rbx) (% r15) *)
 [0x4c; 0x8d; 0x04; 0x03];  (* LEA (% r8) (%%% (rbx,0,rax)) *)
 [0x4c; 0x8d; 0x04; 0x10];  (* LEA (% r8) (%%% (rax,0,rdx)) *)
 [0x4c; 0x8d; 0x0c; 0x10];  (* LEA (% r9) (%%% (rax,0,rdx)) *)
 [0x4c; 0x8d; 0x14; 0x01];  (* LEA (% r10) (%%% (rcx,0,rax)) *)
 [0x4c; 0x8d; 0x14; 0x03];  (* LEA (% r10) (%%% (rbx,0,rax)) *)
 [0x4c; 0x8d; 0x1c; 0x01];  (* LEA (% r11) (%%% (rcx,0,rax)) *)
 [0x4c; 0x8d; 0x1c; 0xc1];  (* LEA (% r11) (%%% (rcx,3,rax)) *)
 [0x4c; 0x8d; 0x24; 0x01];  (* LEA (% r12) (%%% (rcx,0,rax)) *)
 [0x4c; 0x8d; 0x24; 0x10];  (* LEA (% r12) (%%% (rax,0,rdx)) *)
 [0x4c; 0x8d; 0x24; 0xc1];  (* LEA (% r12) (%%% (rcx,3,rax)) *)
 [0x4c; 0x8d; 0x2c; 0x10];  (* LEA (% r13) (%%% (rax,0,rdx)) *)
 [0x4c; 0x8d; 0x34; 0x01];  (* LEA (% r14) (%%% (rcx,0,rax)) *)
 [0x4c; 0x8d; 0x3c; 0x03];  (* LEA (% r15) (%%% (rbx,0,rax)) *)
 [0x4c; 0x8d; 0x42; 0xed];  (* LEA (% r8) (%% (rdx,18446744073709551597)) *)
 [0x4c; 0x8d; 0x43; 0xff];  (* LEA (% r8) (%% (rbx,18446744073709551615)) *)
 [0x4c; 0x8d; 0x45; 0xff];  (* LEA (% r8) (%% (rbp,18446744073709551615)) *)
 [0x4c; 0x8d; 0x4a; 0xff];  (* LEA (% r9) (%% (rdx,18446744073709551615)) *)
 [0x4c; 0x8d; 0x59; 0xff];  (* LEA (% r11) (%% (rcx,18446744073709551615)) *)
 [0x4c; 0x8d; 0x5a; 0x01];  (* LEA (% r11) (%% (rdx,1)) *)
 [0x4c; 0x8d; 0x5a; 0xff];  (* LEA (% r11) (%% (rdx,18446744073709551615)) *)
 [0x4c; 0x8d; 0x67; 0xff];  (* LEA (% r12) (%% (rdi,18446744073709551615)) *)
 [0x4d; 0x01; 0xc0];        (* ADD (% r8) (% r8) *)
 [0x4d; 0x01; 0xc2];        (* ADD (% r10) (% r8) *)
 [0x4d; 0x01; 0xc4];        (* ADD (% r12) (% r8) *)
 [0x4d; 0x01; 0xc6];        (* ADD (% r14) (% r8) *)
 [0x4d; 0x01; 0xc7];        (* ADD (% r15) (% r8) *)
 [0x4d; 0x01; 0xc9];        (* ADD (% r9) (% r9) *)
 [0x4d; 0x01; 0xce];        (* ADD (% r14) (% r9) *)
 [0x4d; 0x01; 0xd3];        (* ADD (% r11) (% r10) *)
 [0x4d; 0x01; 0xdc];        (* ADD (% r12) (% r11) *)
 [0x4d; 0x01; 0xe6];        (* ADD (% r14) (% r12) *)
 [0x4d; 0x01; 0xec];        (* ADD (% r12) (% r13) *)
 [0x4d; 0x01; 0xed];        (* ADD (% r13) (% r13) *)
 [0x4d; 0x01; 0xf9];        (* ADD (% r9) (% r15) *)
 [0x4d; 0x01; 0xfb];        (* ADD (% r11) (% r15) *)
 [0x4d; 0x09; 0xc2];        (* OR (% r10) (% r8) *)
 [0x4d; 0x09; 0xca];        (* OR (% r10) (% r9) *)
 [0x4d; 0x09; 0xcb];        (* OR (% r11) (% r9) *)
 [0x4d; 0x09; 0xd3];        (* OR (% r11) (% r10) *)
 [0x4d; 0x0f; 0x42; 0xc2];  (* CMOVB (% r8) (% r10) *)
 [0x4d; 0x0f; 0x42; 0xc3];  (* CMOVB (% r8) (% r11) *)
 [0x4d; 0x0f; 0x42; 0xe0];  (* CMOVB (% r12) (% r8) *)
 [0x4d; 0x0f; 0x42; 0xe9];  (* CMOVB (% r13) (% r9) *)
 [0x4d; 0x0f; 0x42; 0xf1];  (* CMOVB (% r14) (% r9) *)
 [0x4d; 0x0f; 0x42; 0xf2];  (* CMOVB (% r14) (% r10) *)
 [0x4d; 0x0f; 0x42; 0xfb];  (* CMOVB (% r15) (% r11) *)
 [0x4d; 0x0f; 0x43; 0xe0];  (* CMOVAE (% r12) (% r8) *)
 [0x4d; 0x0f; 0x43; 0xe6];  (* CMOVAE (% r12) (% r14) *)
 [0x4d; 0x0f; 0x43; 0xee];  (* CMOVAE (% r13) (% r14) *)
 [0x4d; 0x0f; 0x43; 0xfe];  (* CMOVAE (% r15) (% r14) *)
 [0x4d; 0x0f; 0x45; 0xd0];  (* CMOVNE (% r10) (% r8) *)
 [0x4d; 0x0f; 0x45; 0xdd];  (* CMOVNE (% r11) (% r13) *)
 [0x4d; 0x0f; 0x45; 0xf8];  (* CMOVNE (% r15) (% r8) *)
 [0x4d; 0x0f; 0x45; 0xf9];  (* CMOVNE (% r15) (% r9) *)
 [0x4d; 0x0f; 0xa5; 0xf4];  (* SHLD (% r12) (% r14) (% cl) *)
 [0x4d; 0x0f; 0xad; 0xf4];  (* SHRD (% r12) (% r14) (% cl) *)
 [0x4d; 0x0f; 0xaf; 0xc2];  (* IMUL (% r8) (% r10) *)
 [0x4d; 0x0f; 0xaf; 0xc7];  (* IMUL (% r8) (% r15) *)
 [0x4d; 0x0f; 0xaf; 0xca];  (* IMUL (% r9) (% r10) *)
 [0x4d; 0x0f; 0xaf; 0xd1];  (* IMUL (% r10) (% r9) *)
 [0x4d; 0x0f; 0xaf; 0xd3];  (* IMUL (% r10) (% r11) *)
 [0x4d; 0x0f; 0xaf; 0xe0];  (* IMUL (% r12) (% r8) *)
 [0x4d; 0x0f; 0xaf; 0xe7];  (* IMUL (% r12) (% r15) *)
 [0x4d; 0x0f; 0xaf; 0xeb];  (* IMUL (% r13) (% r11) *)
 [0x4d; 0x0f; 0xaf; 0xf3];  (* IMUL (% r14) (% r11) *)
 [0x4d; 0x0f; 0xaf; 0xf6];  (* IMUL (% r14) (% r14) *)
 [0x4d; 0x0f; 0xaf; 0xfb];  (* IMUL (% r15) (% r11) *)
 [0x4d; 0x11; 0xc0];        (* ADC (% r8) (% r8) *)
 [0x4d; 0x11; 0xc2];        (* ADC (% r10) (% r8) *)
 [0x4d; 0x11; 0xc3];        (* ADC (% r11) (% r8) *)
 [0x4d; 0x11; 0xc6];        (* ADC (% r14) (% r8) *)
 [0x4d; 0x11; 0xc7];        (* ADC (% r15) (% r8) *)
 [0x4d; 0x11; 0xc8];        (* ADC (% r8) (% r9) *)
 [0x4d; 0x11; 0xc9];        (* ADC (% r9) (% r9) *)
 [0x4d; 0x11; 0xcb];        (* ADC (% r11) (% r9) *)
 [0x4d; 0x11; 0xcd];        (* ADC (% r13) (% r9) *)
 [0x4d; 0x11; 0xce];        (* ADC (% r14) (% r9) *)
 [0x4d; 0x11; 0xcf];        (* ADC (% r15) (% r9) *)
 [0x4d; 0x11; 0xd0];        (* ADC (% r8) (% r10) *)
 [0x4d; 0x11; 0xd1];        (* ADC (% r9) (% r10) *)
 [0x4d; 0x11; 0xd2];        (* ADC (% r10) (% r10) *)
 [0x4d; 0x11; 0xd3];        (* ADC (% r11) (% r10) *)
 [0x4d; 0x11; 0xd6];        (* ADC (% r14) (% r10) *)
 [0x4d; 0x11; 0xd8];        (* ADC (% r8) (% r11) *)
 [0x4d; 0x11; 0xd9];        (* ADC (% r9) (% r11) *)
 [0x4d; 0x11; 0xda];        (* ADC (% r10) (% r11) *)
 [0x4d; 0x11; 0xdb];        (* ADC (% r11) (% r11) *)
 [0x4d; 0x11; 0xdd];        (* ADC (% r13) (% r11) *)
 [0x4d; 0x11; 0xdf];        (* ADC (% r15) (% r11) *)
 [0x4d; 0x11; 0xe4];        (* ADC (% r12) (% r12) *)
 [0x4d; 0x11; 0xec];        (* ADC (% r12) (% r13) *)
 [0x4d; 0x11; 0xed];        (* ADC (% r13) (% r13) *)
 [0x4d; 0x11; 0xf1];        (* ADC (% r9) (% r14) *)
 [0x4d; 0x11; 0xf2];        (* ADC (% r10) (% r14) *)
 [0x4d; 0x11; 0xf3];        (* ADC (% r11) (% r14) *)
 [0x4d; 0x11; 0xf4];        (* ADC (% r12) (% r14) *)
 [0x4d; 0x11; 0xf5];        (* ADC (% r13) (% r14) *)
 [0x4d; 0x11; 0xf6];        (* ADC (% r14) (% r14) *)
 [0x4d; 0x11; 0xf9];        (* ADC (% r9) (% r15) *)
 [0x4d; 0x11; 0xfb];        (* ADC (% r11) (% r15) *)
 [0x4d; 0x11; 0xfe];        (* ADC (% r14) (% r15) *)
 [0x4d; 0x11; 0xff];        (* ADC (% r15) (% r15) *)
 [0x4d; 0x19; 0xc0];        (* SBB (% r8) (% r8) *)
 [0x4d; 0x19; 0xc2];        (* SBB (% r10) (% r8) *)
 [0x4d; 0x19; 0xc9];        (* SBB (% r9) (% r9) *)
 [0x4d; 0x19; 0xcb];        (* SBB (% r11) (% r9) *)
 [0x4d; 0x19; 0xd0];        (* SBB (% r8) (% r10) *)
 [0x4d; 0x19; 0xd1];        (* SBB (% r9) (% r10) *)
 [0x4d; 0x19; 0xd2];        (* SBB (% r10) (% r10) *)
 [0x4d; 0x19; 0xd3];        (* SBB (% r11) (% r10) *)
 [0x4d; 0x19; 0xd4];        (* SBB (% r12) (% r10) *)
 [0x4d; 0x19; 0xd8];        (* SBB (% r8) (% r11) *)
 [0x4d; 0x19; 0xd9];        (* SBB (% r9) (% r11) *)
 [0x4d; 0x19; 0xdb];        (* SBB (% r11) (% r11) *)
 [0x4d; 0x19; 0xdd];        (* SBB (% r13) (% r11) *)
 [0x4d; 0x19; 0xe0];        (* SBB (% r8) (% r12) *)
 [0x4d; 0x19; 0xe1];        (* SBB (% r9) (% r12) *)
 [0x4d; 0x19; 0xe4];        (* SBB (% r12) (% r12) *)
 [0x4d; 0x19; 0xe9];        (* SBB (% r9) (% r13) *)
 [0x4d; 0x19; 0xed];        (* SBB (% r13) (% r13) *)
 [0x4d; 0x19; 0xf6];        (* SBB (% r14) (% r14) *)
 [0x4d; 0x19; 0xff];        (* SBB (% r15) (% r15) *)
 [0x4d; 0x21; 0xc1];        (* AND (% r9) (% r8) *)
 [0x4d; 0x21; 0xc2];        (* AND (% r10) (% r8) *)
 [0x4d; 0x21; 0xc7];        (* AND (% r15) (% r8) *)
 [0x4d; 0x21; 0xc8];        (* AND (% r8) (% r9) *)
 [0x4d; 0x21; 0xd1];        (* AND (% r9) (% r10) *)
 [0x4d; 0x21; 0xda];        (* AND (% r10) (% r11) *)
 [0x4d; 0x21; 0xdc];        (* AND (% r12) (% r11) *)
 [0x4d; 0x21; 0xe2];        (* AND (% r10) (% r12) *)
 [0x4d; 0x29; 0xc1];        (* SUB (% r9) (% r8) *)
 [0x4d; 0x29; 0xc3];        (* SUB (% r11) (% r8) *)
 [0x4d; 0x29; 0xc6];        (* SUB (% r14) (% r8) *)
 [0x4d; 0x29; 0xc8];        (* SUB (% r8) (% r9) *)
 [0x4d; 0x29; 0xca];        (* SUB (% r10) (% r9) *)
 [0x4d; 0x29; 0xd3];        (* SUB (% r11) (% r10) *)
 [0x4d; 0x29; 0xd6];        (* SUB (% r14) (% r10) *)
 [0x4d; 0x29; 0xda];        (* SUB (% r10) (% r11) *)
 [0x4d; 0x29; 0xdc];        (* SUB (% r12) (% r11) *)
 [0x4d; 0x29; 0xe5];        (* SUB (% r13) (% r12) *)
 [0x4d; 0x29; 0xe8];        (* SUB (% r8) (% r13) *)
 [0x4d; 0x29; 0xec];        (* SUB (% r12) (% r13) *)
 [0x4d; 0x29; 0xfe];        (* SUB (% r14) (% r15) *)
 [0x4d; 0x31; 0xc0];        (* XOR (% r8) (% r8) *)
 [0x4d; 0x31; 0xc8];        (* XOR (% r8) (% r9) *)
 [0x4d; 0x31; 0xc9];        (* XOR (% r9) (% r9) *)
 [0x4d; 0x31; 0xd1];        (* XOR (% r9) (% r10) *)
 [0x4d; 0x31; 0xd2];        (* XOR (% r10) (% r10) *)
 [0x4d; 0x31; 0xd3];        (* XOR (% r11) (% r10) *)
 [0x4d; 0x31; 0xda];        (* XOR (% r10) (% r11) *)
 [0x4d; 0x31; 0xdb];        (* XOR (% r11) (% r11) *)
 [0x4d; 0x31; 0xe4];        (* XOR (% r12) (% r12) *)
 [0x4d; 0x31; 0xe6];        (* XOR (% r14) (% r12) *)
 [0x4d; 0x31; 0xec];        (* XOR (% r12) (% r13) *)
 [0x4d; 0x31; 0xed];        (* XOR (% r13) (% r13) *)
 [0x4d; 0x31; 0xf6];        (* XOR (% r14) (% r14) *)
 [0x4d; 0x31; 0xfb];        (* XOR (% r11) (% r15) *)
 [0x4d; 0x31; 0xfe];        (* XOR (% r14) (% r15) *)
 [0x4d; 0x31; 0xff];        (* XOR (% r15) (% r15) *)
 [0x4d; 0x39; 0xc4];        (* CMP (% r12) (% r8) *)
 [0x4d; 0x39; 0xcb];        (* CMP (% r11) (% r9) *)
 [0x4d; 0x39; 0xce];        (* CMP (% r14) (% r9) *)
 [0x4d; 0x39; 0xe9];        (* CMP (% r9) (% r13) *)
 [0x4d; 0x39; 0xf1];        (* CMP (% r9) (% r14) *)
 [0x4d; 0x39; 0xf5];        (* CMP (% r13) (% r14) *)
 [0x4d; 0x85; 0xc0];        (* TEST (% r8) (% r8) *)
 [0x4d; 0x85; 0xc9];        (* TEST (% r9) (% r9) *)
 [0x4d; 0x85; 0xdb];        (* TEST (% r11) (% r11) *)
 [0x4d; 0x89; 0xc1];        (* MOV (% r9) (% r8) *)
 [0x4d; 0x89; 0xc2];        (* MOV (% r10) (% r8) *)
 [0x4d; 0x89; 0xc3];        (* MOV (% r11) (% r8) *)
 [0x4d; 0x89; 0xc5];        (* MOV (% r13) (% r8) *)
 [0x4d; 0x89; 0xc7];        (* MOV (% r15) (% r8) *)
 [0x4d; 0x89; 0xc8];        (* MOV (% r8) (% r9) *)
 [0x4d; 0x89; 0xca];        (* MOV (% r10) (% r9) *)
 [0x4d; 0x89; 0xcb];        (* MOV (% r11) (% r9) *)
 [0x4d; 0x89; 0xd0];        (* MOV (% r8) (% r10) *)
 [0x4d; 0x89; 0xd1];        (* MOV (% r9) (% r10) *)
 [0x4d; 0x89; 0xd3];        (* MOV (% r11) (% r10) *)
 [0x4d; 0x89; 0xd4];        (* MOV (% r12) (% r10) *)
 [0x4d; 0x89; 0xd6];        (* MOV (% r14) (% r10) *)
 [0x4d; 0x89; 0xd9];        (* MOV (% r9) (% r11) *)
 [0x4d; 0x89; 0xda];        (* MOV (% r10) (% r11) *)
 [0x4d; 0x89; 0xdc];        (* MOV (% r12) (% r11) *)
 [0x4d; 0x89; 0xe0];        (* MOV (% r8) (% r12) *)
 [0x4d; 0x89; 0xe2];        (* MOV (% r10) (% r12) *)
 [0x4d; 0x89; 0xe5];        (* MOV (% r13) (% r12) *)
 [0x4d; 0x89; 0xe6];        (* MOV (% r14) (% r12) *)
 [0x4d; 0x89; 0xe9];        (* MOV (% r9) (% r13) *)
 [0x4d; 0x89; 0xf0];        (* MOV (% r8) (% r14) *)
 [0x4d; 0x89; 0xf2];        (* MOV (% r10) (% r14) *)
 [0x4d; 0x89; 0xf4];        (* MOV (% r12) (% r14) *)
 [0x4d; 0x89; 0xf5];        (* MOV (% r13) (% r14) *)
 [0x4d; 0x89; 0xf7];        (* MOV (% r15) (% r14) *)
 [0x4d; 0x89; 0xf9];        (* MOV (% r9) (% r15) *)
 [0x4d; 0x89; 0xfb];        (* MOV (% r11) (% r15) *)
 [0x4d; 0x89; 0xfc];        (* MOV (% r12) (% r15) *)
 [0x4d; 0x89; 0xfe];        (* MOV (% r14) (% r15) *)
 [0x4d; 0x8d; 0x14; 0xf8];  (* LEA (% r10) (%%% (r8,3,rdi)) *)
 [0x4d; 0x8d; 0x3c; 0xf8];  (* LEA (% r15) (%%% (r8,3,rdi)) *)
 [0x4d; 0x8d; 0x3c; 0xfa];  (* LEA (% r15) (%%% (r10,3,rdi)) *)
 [0x4d; 0x8d; 0x49; 0xff];  (* LEA (% r9) (%% (r9,18446744073709551615)) *)
 [0x4d; 0x8d; 0x66; 0xff];  (* LEA (% r12) (%% (r14,18446744073709551615)) *)
 [0x4f; 0x8d; 0x04; 0x80];  (* LEA (% r8) (%%% (r8,2,r8)) *)
 [0x4f; 0x8d; 0x3c; 0xf0];  (* LEA (% r15) (%%% (r8,3,r14)) *)
 [0x83; 0xe2; 0x05];        (* AND (% edx) (Imm8 (word 5)) *)
 [0xf5];                    (* CMC *)
 [0xf9];                    (* STCF *)
];;

(*let iclasses =
  map (function (0x48::l::m) -> l::m | m -> m) iclasses;;*)

(* ------------------------------------------------------------------------- *)
(* Run a random example.                                                     *)
(* ------------------------------------------------------------------------- *)

let template =
 `ensures x86
     (\s. bytes_loaded s (word pc) ibytes /\
          read RIP s = word pc /\
          regfile s = input_state)
     (\s. regfile s = output_state)
     (MAYCHANGE [RIP; RAX; RCX; RDX; RBX; RBP; RSI; RDI;
                 R8; R9; R10; R11; R12; R13; R14; R15] ,,
      MAYCHANGE SOME_FLAGS)`;;

let num_two_to_64 = Num.num_of_string "18446744073709551616";;

let rec split_first_n (ls: 'a list) (n: int) =
  if n = 0 then ([], ls)
  else match ls with
    | h::t -> let l1, l2 = split_first_n t (n-1) in (h::l1, l2)
    | [] -> failwith "n cannot be smaller than the length of ls";;

let only_undefinedness =
  let zx_tm = `word_zx:int32->int64` in
  let is_undefname s =
     String.length s >= 10 && String.sub s 0 10 = "undefined_" in
  let is_undef t = is_var t && is_undefname (fst(dest_var t)) in
  let is_nundef tm = match tm with
      Comb(Comb(Const("=",_),l),r) when is_undef l -> true
    | Comb(Comb(Const("=",_),Comb(z,l)),r) when z = zx_tm && is_undef l -> true
    | Comb(Const("~",_),l) when is_undef l -> true
    | _ -> is_undef tm in
  forall is_nundef o conjuncts;;


let run_random_simulation () =
  let ibytes:int list = random_instruction iclasses in
  let icode = itlist (fun h t -> Int h +/ Int 256 */ t) ibytes num_0 in
  let _ = Format.print_string
   ("random inst: decode "^string_of_num icode ^ "\n") in

  let ibyteterm =
    mk_flist(map (curry mk_comb `word:num->byte` o mk_small_numeral) ibytes) in

  let input_state = random_regstate() in

  let outfile = Filename.temp_file "x86simulator" ".out" in

  let command =
    "x86/proofs/x86simulate '" ^
    end_itlist (fun s t -> s ^ "," ^ t) (map string_of_int ibytes) ^
    "' " ^
    end_itlist (fun s t -> s ^ " " ^ t) (map string_of_num input_state) ^
    " >" ^ outfile in

  let _ = Sys.command command in

  (*** This branch determines whether the actual simulation worked ***)
  (*** In each branch we try to confirm that we likewise do or don't ***)

  if strings_of_file outfile <> [] then
    let resultstring = string_of_file outfile in

    let output_state_raw =
      map (fun (Ident s) -> num_of_string s)
          (lex(explode resultstring)) in

    (* Synthesize q registers from two 64 ints *)
    let output_state = output_state_raw in

    let goal = subst
      [ibyteterm,`ibytes:byte list`;
       mk_flist(map mk_numeral input_state),`input_state:num list`;
       mk_flist(map mk_numeral output_state),`output_state:num list`]
      template in

    let execth = X86_MK_EXEC_RULE(REFL ibyteterm) in

    let decoded =
      rand(rand(snd(strip_forall(rand(concl execth))))) in

    let result =
      match
       (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
        REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN
        CONV_TAC (ONCE_DEPTH_CONV NUM_REDUCE_CONV) THEN
        REWRITE_TAC[SOME_FLAGS] THEN
        X86_SIM_TAC execth [1] THEN
        (* Deal with the BSWAP instruction *)
        TRY (REWRITE_TAC[WORD_EQ_BITS_ALT] THEN
          REWRITE_TAC[BIT_WORD_OF_BITS; IN_ELIM_THM] THEN
          REWRITE_TAC[DIMINDEX_64] THEN CONV_TAC EXPAND_CASES_CONV THEN
          CONV_TAC(DEPTH_CONV WORD_NUM_RED_CONV) THEN
          FAIL_TAC "Not BSWAP, or BSWAP having more complicated "))
       ([],goal)
      with
        _,[_,endres],_ ->
         (if endres = `T` || only_undefinedness endres then
            (Format.print_string "Modulo undefinedness "; true)
          else
            let _,[_,gsd],_ =
             (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
              REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
              REWRITE_TAC[SOME_FLAGS]) ([], goal) in
             (print_qterm gsd; Format.print_newline(); false))
     | _,[],_ -> true in
    (decoded,result)
  else
    let decoded = mk_numeral icode in
    decoded,not(can X86_MK_EXEC_RULE(REFL ibyteterm));;

(* ------------------------------------------------------------------------- *)
(* Keep running tests till a failure happens then return it.                 *)
(* ------------------------------------------------------------------------- *)

let time_limit_sec = 1800.0;;
let tested_instances = ref 0;;

let rec run_random_simulations start_t =
  let decoded,result = run_random_simulation() in
  if result then begin
    tested_instances := !tested_instances + 1;
    let fey = if is_numeral decoded
              then " (fails correctly) instruction code " else " " in
    let _ = Format.print_string("OK:" ^ fey ^ string_of_term decoded);
            Format.print_newline() in
    let now_t = Sys.time() in
    if now_t -. start_t > time_limit_sec then
      let _ = Printf.printf "Finished (time limit: %fs, tested instances: %d)\n"
          time_limit_sec !tested_instances in
      None
    else run_random_simulations start_t
  end
  else Some (decoded,result);;

(*** Depending on the degree of repeatability wanted.
 *** After a few experiments I'm now going full random.
 ***
 *** Random.init(Hashtbl.hash (Sys.getenv "HOST"));;
 ***)

Random.self_init();;

let start_t = Sys.time() (* unit is sec *) in
  match run_random_simulations start_t with
  | Some (t,_) -> Printf.printf "Error: term `%s`" (string_of_term t); exit 1
  | None -> ();;
