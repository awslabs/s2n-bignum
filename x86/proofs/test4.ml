needs "x86/proofs/base.ml";;

loadt "x86/proofs/simulator.ml";;

let ibyteterm = `[(word 72):byte; word 131; word 196; word 16; word 80; word 72; word 131; word 236;
  word 8]`;;
let execth = X86_MK_EXEC_RULE(REFL ibyteterm);;

let lemma = prove (`9 <= LENGTH [1;2;3;4;5;6;7;8;9]`, CONV_TAC(TOP_DEPTH_CONV LENGTH_CONV) THEN SIMPLE_ARITH_TAC);;

(* [4,ADD (% rsp) (Imm8 (word 16)); 
    1,PUSH (% rax);
    4,SUB (% rsp) (Imm8 (word 8))] *)
let goal = `
nonoverlapping
(word pc,
 LENGTH
 [(word 72):byte; word 131; word 196; word 16; word 80; word 72; word 131; word 236;
  word 8])
(stackpointer,256)
==> ensures x86
    (\s.
         bytes_loaded s (word pc)
         [word 72; word 131; word 196; word 16; word 80; word 72; word 131;
          word 236; word 8] /\
         read RIP s = word pc /\
         read RSP s = stackpointer /\
         regfile s =
         [9685701292039699456; 576551359766200604; 946538851485254240;
          227442781806043400; 21; 4731761560196766109; 1190710639824478720;
          2305985023385274370; 9250265060786383154; 216243417197388344;
          2023684560973611779; 3063076994793087072; 9253210053585176603;
          10558778060776282124; 15176164000250478633; 11575451489329561606;
          7314272645879595024; 4036467235930383361; 180817025874264352;
          9800405431320855731; 290496504528109604; 581107310068797440;
          7061699742098999298; 37728796908142866; 4555358369664;
          9223372192568456256; 2306159737349145093; 9691764137390374944;
          9368613677420250130; 4467579765128495276; 1292779937946796176;
          5265048076155105538; 18019390939369249; 281475271098374;
          2344599738206212673; 10016131065594251010; 72630458975265554;
          144704596706782238; 1153502360666374924; 166774208387534852;
          9243121911540692641; 2344164176714400771; 9514445271491055874;
          394770312996700484; 1153274586940336128; 939054949970624513;
          4913709219571958816; 13835081904211365888; 4883279136530995982;
          4837077106064119552; 2505131987708412684; 255069231230877730;
          72207254320906570; 2333152730732921202; 74450140517107754;
          5931859322002747681; 4543216405708803; 1830328767936037970;
          12155215737939829204; 12703748836930175106; 434707315204960832;
          1229216079172092689; 2490583013379117332; 1153202989813563392;
          942037686469476547; 5193789885378471045; 576830806887112706;
          2449993381728751363; 401328500149585920; 307320793492754516;
          2612182515293756010; 5857167169241153670; 2905388358752634880;
          297476196411727940; 11676430876802582528; 19144696872315472;
          2756485834889781694; 2139376970821011712; 4527935747090;
          9296983241160986948; 2378280621959038529; 4188491760933016264;
          15927125494492037280; 14287690434288390440; 9260034437132361776;
          3468917477217542336; 39547239347782150; 15033090847080947906;
          2451226142779123136; 85643862207927424; 2747196067182872341;
          9547913786661845052; 9945430832550348323; 3500479993581043968;
          2380296856407147144; 721421904183460378; 5913372022100459572;
          5228223989831696809; 436850264461370624; 7007618614522151994;
          11751362180307292688; 5336811811238858785; 15861911001261671058;
          18067317207008016; 70370934850076; 14591688090713064259;
          11567349726765548044; 7025656135089164392; 11610421746692855152;
          7031113221658444064; 14482174121159704626; 1213162205621621825])
    (\s.
         read RSP s = stackpointer /\
         regfile s =
         [9685701292039699456; 576551359766200604; 946538851485254240;
          227442781806043400; 4; 4731761560196766109; 1190710639824478720;
          2305985023385274370; 9250265060786383154; 216243417197388344;
          2023684560973611779; 3063076994793087072; 9253210053585176603;
          10558778060776282124; 15176164000250478633; 11575451489329561606;
          7314272645879595024; 4036467235930383361; 180817025874264352;
          9800405431320855731; 290496504528109604; 581107310068797440;
          7061699742098999298; 37728796908142866; 4555358369664;
          9223372192568456256; 2306159737349145093; 9691764137390374944;
          9368613677420250130; 4467579765128495276; 1292779937946796176;
          5265048076155105538; 18019390939369249; 281475271098374;
          2344599738206212673; 10016131065594251010; 72630458975265554;
          144704596706782238; 1153502360666374924; 166774208387534852;
          9243121911540692641; 2344164176714400771; 9514445271491055874;
          394770312996700484; 1153274586940336128; 939054949970624513;
          4913709219571958816; 13835081904211365888; 4883279136530995982;
          4837077106064119552; 2505131987708412684; 255069231230877730;
          72207254320906570; 2333152730732921202; 74450140517107754;
          5931859322002747681; 4543216405708803; 1830328767936037970;
          12155215737939829204; 12703748836930175106; 434707315204960832;
          1229216079172092689; 2490583013379117332; 1153202989813563392;
          942037686469476547; 5193789885378471045; 576830806887112706;
          2449993381728751363; 401328500149585920; 307320793492754516;
          2612182515293756010; 5857167169241153670; 2905388358752634880;
          297476196411727940; 11676430876802582528; 19144696872315472;
          2756485834889781694; 2139376970821011712; 4527935747090;
          9296983241160986948; 2378280621959038529; 9685701292039699456;
          15927125494492037280; 14287690434288390440; 9260034437132361776;
          3468917477217542336; 39547239347782150; 15033090847080947906;
          2451226142779123136; 85643862207927424; 2747196067182872341;
          9547913786661845052; 9945430832550348323; 3500479993581043968;
          2380296856407147144; 721421904183460378; 5913372022100459572;
          5228223989831696809; 436850264461370624; 7007618614522151994;
          11751362180307292688; 5336811811238858785; 15861911001261671058;
          18067317207008016; 70370934850076; 14591688090713064259;
          11567349726765548044; 7025656135089164392; 11610421746692855152;
          7031113221658444064; 14482174121159704626; 1213162205621621825])
    (MAYCHANGE
     [RIP; RSP; RAX; RCX; RDX; RBX; RBP; RSI; RDI; R8; R9; R10; R11; R12;
      R13; R14; R15] ,,
     MAYCHANGE
     [ZMM0; ZMM1; ZMM2; ZMM3; ZMM4; ZMM5; ZMM6; ZMM7; ZMM8; ZMM9; ZMM10;
      ZMM11; ZMM12; ZMM13; ZMM14; ZMM15] ,,
     MAYCHANGE [memory :> bytes (stackpointer,256)] ,,
     MAYCHANGE SOME_FLAGS)`;;

let result =
    match
     (PURE_REWRITE_TAC [fst execth] THEN

     REWRITE_TAC[NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
     REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
     REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
     REWRITE_TAC[YMMENCODING_REGROUP] THEN CONV_TAC(DEPTH_CONV WORD_JOIN_CONV) THEN
     REWRITE_TAC[SOME_FLAGS] THEN ONCE_REWRITE_TAC[MESON[]
      `read RSP s = stackpointer /\ P (read RSP s) s <=>
       read RSP s = stackpointer /\ P stackpointer s`] THEN
     ENSURES_INIT_TAC "s0" THEN
     MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN

     X86_VSTEPS_TAC execth (1--length [1;2;3]) THEN

     MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN
     ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
     CONV_TAC(ONCE_DEPTH_CONV READ_MEMORY_MERGE_CONV) THEN
     ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
     PRINT_GOAL_TAC THEN ALL_TAC)
     ([],goal)
  with
    _,[_,endres],_ ->
  (if endres = `T` || only_undefinedness endres then
     let _ = print_string "I'm here" in
     let _ = print_term endres in
     (Format.print_string "Modulo undefinedness "; 1)
   else
     let _ = print_string "I'm here2" in
     let _ = print_term endres in
     let _,[_,gsd],_ =
      (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
       REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
       REWRITE_TAC[SOME_FLAGS]) ([],goal) in
      (print_qterm gsd; Format.print_newline(); 0))
  | _,[],_ -> 1 in
let _ = print_int result in
result