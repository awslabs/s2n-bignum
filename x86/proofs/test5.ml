needs "x86/proofs/base.ml";;

loadt "x86/proofs/simulator.ml";;

let ibyteterm = `[(word 72):byte; word 137; word 241; word 72; word 141; word 116; word 36;
  word 3; word 72; word 1; word 6; word 72; word 137; word 206]`;;
let execth = X86_MK_EXEC_RULE(REFL ibyteterm);;

(* [3,MOV (% rcx) (% rsi);
    5,LEA (% rsi) (%% (rsp,3));
    3,ADD (Memop Quadword (%% (rsi,0))) (% rax);
    3,MOV (% rsi) (% rcx)] *)
let goal = `
nonoverlapping
(word pc,
 LENGTH
 [(word 72):byte; word 137; word 241; word 72; word 141; word 116; word 36;
  word 3; word 72; word 1; word 6; word 72; word 137; word 206])
(stackpointer,256)
==> ensures x86
    (\s.
         bytes_loaded s (word pc)
         [word 72; word 137; word 241; word 72; word 141; word 116; word 36;
          word 3; word 72; word 1; word 6; word 72; word 137; word 206] /\
         read RIP s = word pc /\
         read RSP s = stackpointer /\
         regfile s =
         [5029856641064622985; 9069906338921482664; 8178355533554564059;
          7708570708374066794; 65; 9028369627230322772; 1042263028276776528;
          12234954567517020108; 6823065422029807503;
          17964396970407821264; 4961595202324984830; 18158177787044406519; 6273200010451946164;
          9429241346801503987; 5895203000319630319; 9543373578744447788;
          10785519867905702894; 6902879671566087675; 15823828555947928047;
          13757772435326465253; 10149847322099703434; 16860278321712846841;
          17536342947800488712; 12433978003559732812; 5424405449681100664;
          8492455690942523715; 17252388028172908669; 9387064660032480010;
          805825791665167809; 10498115166980839859; 14264889441066577790;
          12485911912777399738; 1813568932329340835; 13443289958257777496;
          13239964199500687848; 11413526757108051738; 17496141120022074955;
          17317803849098132325; 12029091410267925943; 15461194890426046637;
          6555330890945640349; 6520872003254972919; 2557604353728835337;
          12953612087026190197; 13617945138500986283; 12226659151555185300;
          18322040455980493755; 4816331389392352141; 3884266626105328874;
          10160955811177524928; 13698344265210117631; 9645302416247294432;
          15895799576828854839; 13202461438439698174; 17859548631097393726;
          17579764603798968155; 12409681600947412223; 11463804889205807380;
          4393084091781987559; 9597633073034053137; 6501301283547412819;
          7187420709187599601; 10229466842911708039; 2500272771714881483;
          6879664024581639740; 6212683116997931815; 17427184682163952957;
          65191143356839803; 9285269781393000312; 13625157173251087775;
          15374679773158438952; 8935033884665046513; 16402015274399398688;
          17626439453033346028; 11504601933295776343; 11186716203652237682;
          15989952604018796539; 16779614985178267606; 5170042879314427827;
          15909943864533728758;
          3289765908635206231; 18193379894113800061;
          18110660565882458722; 17145283880190130903; 3863958971846999565;
          15850647275321306997; 2703420478110518898; 9736629248210366697;
          2022919813777069212; 3082385252545701016; 11011524201456694287;
          4056071651930340588; 16066402169535669695; 10634666200716643733;
          12842260591265150745; 2363202324965536486; 17213845277555560347;
          6999279701213004795; 10500876803026418611; 2073820285937049515;
          15762866076327144469; 17777337258171376565; 9365143031092112890;
          9022931475169491651; 5981437938850582701; 7029042904529606519;
          1619986575941150187; 1066130333114251839; 18421659609113040907;
          16561133682500552371; 2409617329015648528; 9510069936712570231])
    (\s.
         read RSP s = stackpointer /\
         regfile s =
         [5029856641064622985; 1042263028276776528; 8178355533554564059;
          7708570708374066794; 2192; 9028369627230322772;
          1042263028276776528; 12234954567517020108; 6823065422029807503;
          17964396970407821264; 4961595202324984830; 18158177787044406519;
          6273200010451946164; 9429241346801503987; 5895203000319630319;
          9543373578744447788; 10785519867905702894; 6902879671566087675;
          15823828555947928047; 13757772435326465253; 10149847322099703434;
          16860278321712846841; 17536342947800488712; 12433978003559732812;
          5424405449681100664; 8492455690942523715; 17252388028172908669;
          9387064660032480010; 805825791665167809; 10498115166980839859;
          14264889441066577790; 12485911912777399738; 1813568932329340835;
          13443289958257777496; 13239964199500687848; 11413526757108051738;
          17496141120022074955; 17317803849098132325; 12029091410267925943;
          15461194890426046637; 6555330890945640349; 6520872003254972919;
          2557604353728835337; 12953612087026190197; 13617945138500986283;
          12226659151555185300; 18322040455980493755; 4816331389392352141;
          3884266626105328874; 10160955811177524928; 13698344265210117631;
          9645302416247294432; 15895799576828854839; 13202461438439698174;
          17859548631097393726; 17579764603798968155; 12409681600947412223;
          11463804889205807380; 4393084091781987559; 9597633073034053137;
          6501301283547412819; 7187420709187599601; 10229466842911708039;
          2500272771714881483; 6879664024581639740; 6212683116997931815;
          17427184682163952957; 65191143356839803; 9285269781393000312;
          13625157173251087775; 15374679773158438952; 8935033884665046513;
          16402015274399398688; 17626439453033346028; 11504601933295776343;
          11186716203652237682; 15989952604018796539; 16779614985178267606;
          5170042879314427827; 15909943864533728758;
           2657515779723117143;
          18193379894118374689;
          18110660565882458722; 17145283880190130903;
          3863958971846999565; 15850647275321306997; 2703420478110518898;
          9736629248210366697; 2022919813777069212; 3082385252545701016;
          11011524201456694287; 4056071651930340588; 16066402169535669695;
          10634666200716643733; 12842260591265150745; 2363202324965536486;
          17213845277555560347; 6999279701213004795; 10500876803026418611;
          2073820285937049515; 15762866076327144469; 17777337258171376565;
          9365143031092112890; 9022931475169491651; 5981437938850582701;
          7029042904529606519; 1619986575941150187; 1066130333114251839;
          18421659609113040907; 16561133682500552371; 2409617329015648528;
          9510069936712570231])
    (MAYCHANGE
     [RIP; RSP; RAX; RCX; RDX; RBX; RBP; RSI; RDI; R8; R9; R10; R11; R12;
      R13; R14; R15] ,,
     MAYCHANGE
     [ZMM0; ZMM1; ZMM2; ZMM3; ZMM4; ZMM5; ZMM6; ZMM7; ZMM8; ZMM9; ZMM10;
      ZMM11; ZMM12; ZMM13; ZMM14; ZMM15] ,,
     MAYCHANGE [memory :> bytes (stackpointer,256)] ,,
     MAYCHANGE SOME_FLAGS)`;;

let result =
    match
     (
     PURE_REWRITE_TAC [fst execth] THEN
     REWRITE_TAC[NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
     REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
     REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
     REWRITE_TAC[YMMENCODING_REGROUP] THEN CONV_TAC(DEPTH_CONV WORD_JOIN_CONV) THEN
     REWRITE_TAC[SOME_FLAGS] THEN ONCE_REWRITE_TAC[MESON[]
      `read RSP s = stackpointer /\ P (read RSP s) s <=>
       read RSP s = stackpointer /\ P stackpointer s`] THEN
     ENSURES_INIT_TAC "s0" THEN
     MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN

     X86_VSTEPS_TAC execth (1--4) THEN

     MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN
     ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
     CONV_TAC(ONCE_DEPTH_CONV READ_MEMORY_MERGE_CONV) THEN
     ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
     CONV_TAC(ONCE_DEPTH_CONV READ_MEMORY_MERGE_CONV) THEN
     ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
     PRINT_GOAL_TAC THEN ALL_TAC)
     ([],goal)
  with
    _,[_,endres],_ ->
  (if endres = `T` || only_undefinedness endres then
     let _ = print_string "I'm here" in
     let _ = print_term endres in
     (Format.print_string "Modulo undefinedness "; 1)
   else
     let _ = print_string "I'm here2" in
     let _ = print_term endres in
     let _,[_,gsd],_ =
      (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
       REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
       REWRITE_TAC[SOME_FLAGS]) ([],goal) in
      (print_qterm gsd; Format.print_newline(); 0))
  | _,[],_ -> 1 in
let _ = print_int result in
result
