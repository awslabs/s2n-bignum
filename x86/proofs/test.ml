needs "x86/proofs/base.ml";;

loadt "x86/proofs/simulator.ml";;

let ibyteterm = `[(word 88):byte; word 72; word 131; word 236; word 8]`;;
let execth = X86_MK_EXEC_RULE(REFL ibyteterm);;

(* AND (% rcx) (% r10) *)
(* let test = prove
    (`nonoverlapping (word pc,LENGTH [word 76; word 33; word 209])
    (stackpointer,256)
    ==> ensures x86
        (\s.
             bytes_loaded s (word pc) [word 76; word 33; word 209] /\
             read RIP s = word pc /\
             read RSP s = stackpointer /\
             regfile s =
             [3413088635644387367; 2046257480287292133; 14207472205181493349;
              15286730441529493516; 208; 9590180919592031592;
              4665872297293333322; 16143224681682665234; 1153216294120922565;
              8278251666605828096; 4071852692115444788; 1308093394985495857;
              1225199494891579169; 9307854114805786994; 4471722831093252262;
              17916104988546180097; 1881949779766959616; 3515939162556591968;
              2461899994984408613; 4940672004757053472; 3815570560153864802;
              5947506404595238177; 12756749971856818459; 9307256199373938960;
              10490101383009605842; 14932781409152615498; 17516821401483346244;
              4697320427714309640; 775871724465231893; 7086208480158232585;
              1567991701822394382; 12718741733068919464; 7368733577988821016;
              1735672368218614977; 7019396972120011012; 10590952559083200500;
              7404580520917561581; 184665770777929795; 1120640715364680872;
              6086201802244015520; 9393259789324812815; 16322349512818174620;
              5188152539153338403; 15082559842806887693; 228294674539452892;
              3185228844009523882; 9844033957516175560; 4622959077632006274;
              11714717337002971492; 7069356245203972224; 10089208343339997400;
              78883364150194589; 8147917009349445221; 1207601800551815690;
              1311479012265707984; 1453721568690319170; 4049605375552500769;
              6963550464189151426; 1910907370517891440; 8150108245504049770;
              8741073637314209936; 13279884145525239812; 1496534718530054264;
              4772128972094309092; 748056034643882154; 9999486943997518406;
              1853821711217379137; 4483944759746518245; 13852547473023369748;
              3760230348817122709; 7928215260493481848; 248845073618321924;
              3990872698503135780; 3033271108283717795; 3460095752783632003;
              17908112453735556119; 1265060225996639378; 11097376362537706815;
              16457012724495904022; 4787819048169968092; 13880539844230788825;
              14115700154484958426; 13995096041777364284; 10601720595266478086;
              7174852561702355479; 4652255639212163538; 1609192857464578644;
              12195856505255431199; 18216041683694110336; 17044322367838631017;
              13135346486783098088; 3548978894761702553; 11560866458754295485;
              362839262569194286; 905895229532435600; 10011541657654952102;
              17475667533968441857; 9878087444237797943; 6982021998876660853;
              828701399175989389; 14699802103424824755; 9905692950535520269;
              11713806558313844997; 9610911540212532129; 10461286977858774698;
              2654071719662790842; 10091032970347435540; 7185141512915711784;
              14476696348889593788; 7935062347362929994; 9946674874422935804;
              10412896325146447881])
        (\s.
             read RSP s = stackpointer /\
             regfile s =
             [3413088635644387367; 1729382609684922404; 14207472205181493349;
              15286730441529493516; 4; 9590180919592031592; 4665872297293333322;
              16143224681682665234; 1153216294120922565; 8278251666605828096;
              4071852692115444788; 1308093394985495857; 1225199494891579169;
              9307854114805786994; 4471722831093252262; 17916104988546180097;
              1881949779766959616; 3515939162556591968; 2461899994984408613;
              4940672004757053472; 3815570560153864802; 5947506404595238177;
              12756749971856818459; 9307256199373938960; 10490101383009605842;
              14932781409152615498; 17516821401483346244; 4697320427714309640;
              775871724465231893; 7086208480158232585; 1567991701822394382;
              12718741733068919464; 7368733577988821016; 1735672368218614977;
              7019396972120011012; 10590952559083200500; 7404580520917561581;
              184665770777929795; 1120640715364680872; 6086201802244015520;
              9393259789324812815; 16322349512818174620; 5188152539153338403;
              15082559842806887693; 228294674539452892; 3185228844009523882;
              9844033957516175560; 4622959077632006274; 11714717337002971492;
              7069356245203972224; 10089208343339997400; 78883364150194589;
              8147917009349445221; 1207601800551815690; 1311479012265707984;
              1453721568690319170; 4049605375552500769; 6963550464189151426;
              1910907370517891440; 8150108245504049770; 8741073637314209936;
              13279884145525239812; 1496534718530054264; 4772128972094309092;
              748056034643882154; 9999486943997518406; 1853821711217379137;
              4483944759746518245; 13852547473023369748; 3760230348817122709;
              7928215260493481848; 248845073618321924; 3990872698503135780;
              3033271108283717795; 3460095752783632003; 17908112453735556119;
              1265060225996639378; 11097376362537706815; 16457012724495904022;
              4787819048169968092; 13880539844230788825; 14115700154484958426;
              13995096041777364284; 10601720595266478086; 7174852561702355479;
              4652255639212163538; 1609192857464578644; 12195856505255431199;
              18216041683694110336; 17044322367838631017; 13135346486783098088;
              3548978894761702553; 11560866458754295485; 362839262569194286;
              905895229532435600; 10011541657654952102; 17475667533968441857;
              9878087444237797943; 6982021998876660853; 828701399175989389;
              14699802103424824755; 9905692950535520269; 11713806558313844997;
              9610911540212532129; 10461286977858774698; 2654071719662790842;
              10091032970347435540; 7185141512915711784; 14476696348889593788;
              7935062347362929994; 9946674874422935804; 10412896325146447881])
        (MAYCHANGE
         [RIP; RSP; RAX; RCX; RDX; RBX; RBP; RSI; RDI; R8; R9; R10; R11; R12;
          R13; R14; R15] ,,
         MAYCHANGE
         [ZMM0; ZMM1; ZMM2; ZMM3; ZMM4; ZMM5; ZMM6; ZMM7; ZMM8; ZMM9; ZMM10;
          ZMM11; ZMM12; ZMM13; ZMM14; ZMM15] ,,
         MAYCHANGE [memory :> bytes (stackpointer,256)] ,,
         MAYCHANGE SOME_FLAGS)`,
    PURE_REWRITE_TAC [fst execth] THEN

    REWRITE_TAC[NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
    REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
    REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
    REWRITE_TAC[YMMENCODING_REGROUP] THEN CONV_TAC(DEPTH_CONV WORD_JOIN_CONV) THEN
    REWRITE_TAC[SOME_FLAGS] THEN ONCE_REWRITE_TAC[MESON[]
     `read RSP s = stackpointer /\ P (read RSP s) s <=>
      read RSP s = stackpointer /\ P stackpointer s`] THEN
    ENSURES_INIT_TAC "s0" THEN
    ALL_TAC THEN

    X86_STEPS_TAC execth (1--length [1]) THEN

    ALL_TAC THEN
    ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
    ALL_TAC THEN
    ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
    PRINT_GOAL_TAC THEN NO_TAC);; *)

let goal = `nonoverlapping
(word pc,LENGTH [word 88; word 72; word 131; word 236; word 8])
(stackpointer,256)
==> ensures x86
    (\s.
         bytes_loaded s (word pc)
         [word 88; word 72; word 131; word 236; word 8] /\
         read RIP s = word pc /\
         read RSP s = stackpointer /\
         regfile s =
         [5458264853132967090; 12272009260101957887; 14408690851598987151;
          13687333405469801864; 148; 16118662272516600815;
          9168385144641109498; 17860560858613543907; 8141659266264986813;
          8621573855122271959; 10926916732281813739; 17869013653675877332;
          13575814633976855871; 9138770922038208142; 18427521131532178149;
          2819193640440009034; 8589452954482159086; 18295719433743611319;
          17291094973415945951; 6872207380438711903; 3957176432604150995;
          5757072135916741517; 13270756639115311823; 6883646474197923070;
          17061036847036362053; 8915103761302289395; 17176534900965094102;
          10880007855679591911; 18372451990986813435; 16606702377944068063;
          17869919909111129086; 11383564035113874814; 15904355875384630764;
          8616335222888188871; 11418278718685853183; 3438207494379523547;
          10952469784590938870; 10312554847284882605; 6321571640626754941;
          14984562257816403070; 14681699039745898679; 11939596559791783247;
          17870278905860945915; 17810012455139206623; 13473546560474183785;
          10877767403061376942; 4160668392030896095; 18176193294181425075;
          17221465253875848981; 4052957987791501255; 6597619469856534517;
          16915510011398909951; 9158032181718542824; 1954214585337102335;
          8884599376431478462; 17869259996592599999; 16068253425651973551;
          12244683056455613368; 17278866960284647020; 9167250207758712281;
          8069711642415202150; 8394140044542881662; 12068361629027265647;
          6766937561331563641; 18302628471325317069; 18444491681187897821;
          8857725645273618405; 933929539880284582; 5233026733749169514;
          16768658223394488275; 16103322778261255958; 7917026850807617718;
          13716794584597460454; 3651852417673145211; 2594009336795549055;
          11529177641128819833; 18157654803905244146; 14946321081860599415;
          13041291917587512318; 8209375573189817279; 14938998859156608975;
          8105341966580842484; 13401832326591932745; 7837915917533363154;
          16939144166554533774; 6620100530032896986; 9158069427448636287;
          6879071366377109201; 16131469040683737006; 14891129325987093878;
          9111736353516662524; 9060921357102939983; 12627984443889089871;
          11222394669795040759; 15994586573305138717; 15229457842550435543;
          15959467858724382463; 12954882607314615271; 18076885090410403502;
          17251389823000689579; 13012066713368247647; 18432722441816160504;
          18301324760957568994; 1891176887550368035; 8788131301607992242;
          13797245708271615968; 8604126791520042214; 14753792376561189887;
          16032449411013007775; 13491489665572568758; 12500575385137439118;
          14755990711027234357])
    (\s.
         read RSP s = stackpointer /\
         regfile s =
         [14938998859156608975; 12272009260101957887; 14408690851598987151;
          13687333405469801864; 0; 16118662272516600815; 9168385144641109498;
          17860560858613543907; 8141659266264986813; 8621573855122271959;
          10926916732281813739; 17869013653675877332; 13575814633976855871;
          9138770922038208142; 18427521131532178149; 2819193640440009034;
          8589452954482159086; 18295719433743611319; 17291094973415945951;
          6872207380438711903; 3957176432604150995; 5757072135916741517;
          13270756639115311823; 6883646474197923070; 17061036847036362053;
          8915103761302289395; 17176534900965094102; 10880007855679591911;
          18372451990986813435; 16606702377944068063; 17869919909111129086;
          11383564035113874814; 15904355875384630764; 8616335222888188871;
          11418278718685853183; 3438207494379523547; 10952469784590938870;
          10312554847284882605; 6321571640626754941; 14984562257816403070;
          14681699039745898679; 11939596559791783247; 17870278905860945915;
          17810012455139206623; 13473546560474183785; 10877767403061376942;
          4160668392030896095; 18176193294181425075; 17221465253875848981;
          4052957987791501255; 6597619469856534517; 16915510011398909951;
          9158032181718542824; 1954214585337102335; 8884599376431478462;
          17869259996592599999; 16068253425651973551; 12244683056455613368;
          17278866960284647020; 9167250207758712281; 8069711642415202150;
          8394140044542881662; 12068361629027265647; 6766937561331563641;
          18302628471325317069; 18444491681187897821; 8857725645273618405;
          933929539880284582; 5233026733749169514; 16768658223394488275;
          16103322778261255958; 7917026850807617718; 13716794584597460454;
          3651852417673145211; 2594009336795549055; 11529177641128819833;
          18157654803905244146; 14946321081860599415; 13041291917587512318;
          8209375573189817279; 14938998859156608975; 8105341966580842484;
          13401832326591932745; 7837915917533363154; 16939144166554533774;
          6620100530032896986; 9158069427448636287; 6879071366377109201;
          16131469040683737006; 14891129325987093878; 9111736353516662524;
          9060921357102939983; 12627984443889089871; 11222394669795040759;
          15994586573305138717; 15229457842550435543; 15959467858724382463;
          12954882607314615271; 18076885090410403502; 17251389823000689579;
          13012066713368247647; 18432722441816160504; 18301324760957568994;
          1891176887550368035; 8788131301607992242; 13797245708271615968;
          8604126791520042214; 14753792376561189887; 16032449411013007775;
          13491489665572568758; 12500575385137439118; 14755990711027234357])
    (MAYCHANGE
     [RIP; RSP; RAX; RCX; RDX; RBX; RBP; RSI; RDI; R8; R9; R10; R11; R12;
      R13; R14; R15] ,,
     MAYCHANGE
     [ZMM0; ZMM1; ZMM2; ZMM3; ZMM4; ZMM5; ZMM6; ZMM7; ZMM8; ZMM9; ZMM10;
      ZMM11; ZMM12; ZMM13; ZMM14; ZMM15] ,,
     MAYCHANGE [memory :> bytes (stackpointer,256)] ,,
     MAYCHANGE SOME_FLAGS)`;;

let result =
      match
       (PURE_REWRITE_TAC [fst execth] THEN

       REWRITE_TAC[NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
       REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
       REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
       REWRITE_TAC[YMMENCODING_REGROUP] THEN CONV_TAC(DEPTH_CONV WORD_JOIN_CONV) THEN
       REWRITE_TAC[SOME_FLAGS] THEN ONCE_REWRITE_TAC[MESON[]
        `read RSP s = stackpointer /\ P (read RSP s) s <=>
         read RSP s = stackpointer /\ P stackpointer s`] THEN
       ENSURES_INIT_TAC "s0" THEN
       MAP_EVERY MEMORY_SPLIT_TAC (1--4) THEN

       X86_VSTEPS_TAC execth (1--length [1;2]) THEN

       MAP_EVERY MEMORY_SPLIT_TAC (0--4) THEN
       ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
       CONV_TAC(ONCE_DEPTH_CONV READ_MEMORY_MERGE_CONV) THEN
       ASM_REWRITE_TAC[] THEN extra_simp_tac THEN
       PRINT_GOAL_TAC THEN ALL_TAC)
       ([],goal)
    with
      _,[_,endres],_ ->
    (if endres = `T` || only_undefinedness endres then
       let _ = print_string "I'm here" in
       let _ = print_term endres in
       (Format.print_string "Modulo undefinedness "; 1)
     else
       let _ = print_string "I'm here2" in
       let _ = print_term endres in
       let _,[_,gsd],_ =
        (REWRITE_TAC[regfile; CONS_11; FLAGENCODING_11; VAL_WORD_GALOIS] THEN
         REWRITE_TAC[DIMINDEX_64; DIMINDEX_128] THEN CONV_TAC NUM_REDUCE_CONV THEN
         REWRITE_TAC[SOME_FLAGS]) ([],goal) in
        (print_qterm gsd; Format.print_newline(); 0))
    | _,[],_ -> 1 in
let _ = print_int result in
result